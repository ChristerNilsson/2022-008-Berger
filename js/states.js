// Generated by CoffeeScript 2.5.1
var ALPHABET, common, getLocalCoords, grid, invert, markeraRond;

import {
  globals
} from './globals.js';

import {
  CRounded,
  CDead
} from './controls.js';

ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'; // spelare

// halvborden heter 1..20. Jämn är vit, udda är svart
grid = function(xoff, dx, nx, yoff, dy, ny) {
  var i, k, l, len, len1, ref, ref1, results;
  ref = range(ny + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    line(xoff, yoff + dy * i, xoff + nx * dx, yoff + dy * i);
  }
  ref1 = range(nx + 1);
  results = [];
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    i = ref1[l];
    results.push(line(xoff + dx * i, yoff, xoff + dx * i, yoff + ny * dy));
  }
  return results;
};

invert = function(arr) {
  var i, item, k, len, ref, res;
  res = [];
  ref = range(arr.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    item = arr[i];
    res[item] = i;
  }
  return res;
};

markeraRond = function(rond, xoff, dx, yoff, dy, N) {
  push();
  fill('lightgray');
  noStroke();
  rectMode(CORNER);
  rect(dx - 0.5 + dx * rond, 3, dx, N * dy);
  return pop();
};

getLocalCoords = function() {
  var matrix, pd;
  matrix = drawingContext.getTransform();
  pd = pixelDensity();
  return matrix.inverse().transformPoint(new DOMPoint(mouseX * pd, mouseY * pd));
};

export var setState = function(key) {
  globals.currState = globals.states[key];
  common.A.disabled = key === 'SA';
  common.B.disabled = key === 'SB';
  common.C.disabled = key === 'SC';
  return common.D.disabled = key === 'SD';
};

export var setRond = function(delta) {
  globals.rond += delta;
  common.R0.visible = globals.rond > 0;
  common.R2.visible = globals.rond < globals.N - 2;
  common.R0.text = globals.rond - 1;
  common.R1.text = globals.rond;
  return common.R2.text = globals.rond + 1;
};

common = {};

common.A = new CRounded(10, 96.5, 15, 6, 'Halvbord', () => {
  return setState('SA');
});

common.B = new CRounded(25, 96.5, 15, 6, "Berger\nHalvbord", () => {
  return setState('SB');
});

common.C = new CRounded(40, 96.5, 15, 6, 'Cirkel', () => {
  return setState('SC');
});

common.D = new CRounded(55, 96.5, 15, 6, "Berger\nSpelare", () => {
  return setState('SD');
});

common.rond = new CDead(67, 96.5, 'Rond:');

common.R0 = new CRounded(75, 96.5, 8, 6, 0, () => {
  return setRond(-1);
});

common.R1 = new CRounded(85, 96.5, 8, 6, 1);

common.R2 = new CRounded(95, 96.5, 8, 6, 2, () => {
  return setRond(+1);
});

common.R1.disabled = true;

export var State = class State {
  constructor(name1) {
    this.name = name1;
    this.controls = common;
  }

  draw() {
    var key, results;
    results = [];
    for (key in this.controls) {
      results.push(this.controls[key].draw());
    }
    return results;
  }

  mouseClicked() {
    var control, key, results, x, y;
    ({x, y} = getLocalCoords());
    results = [];
    for (key in this.controls) {
      control = this.controls[key];
      if (control.visible && !control.disabled && control.inside(x, y)) {
        if (control.click) {
          control.click();
        }
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

export var SA = class SA extends State {
  constructor(name) {
    var N, i, k, l, len, len1, ref, ref1, x1;
    super(name);
    // bygg koordinatlistor
    this.x = [];
    this.y = [];
    N = globals.N;
    ref = range(N / 2);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      this.x.push(5 + i * 10);
      this.y.push(41);
    }
    x1 = this.x.slice();
    _.reverse(this.x);
    this.x = x1.concat(this.x);
    ref1 = range(N / 2);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      this.y.push(49);
    }
  }

  draw() {
    var N, dy, iPlace, k, len, players, ref, results;
    super.draw();
    players = globals.ronder[globals.rond];
    textSize(5);
    N = globals.N;
    ref = range(N);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      iPlace = ref[k];
      fill('gray');
      rect(this.x[iPlace], this.y[iPlace], 8, 8);
      fill(['white', 'black'][iPlace % 2]);
      text(iPlace, this.x[iPlace], this.y[iPlace] + 0.5);
      dy = iPlace >= N / 2 ? 8 : -7;
      fill('black');
      results.push(text(ALPHABET[players[iPlace]], this.x[iPlace], this.y[iPlace] + dy));
    }
    return results;
  }

};

export var SB = class SB extends State {
  draw() {
    var N, dx, dy, i, iPlace, iPlayer, inverted, k, l, len, len1, len2, n, players, ref, ref1, ref2, rond, xoff, yoff;
    super.draw();
    N = globals.N;
    dx = 5;
    dy = 4.5;
    xoff = 4.5;
    yoff = 6;
    inverted = [];
    textSize(3);
    fill('black');
    ref = range(N);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      text(ALPHABET[i], 2, yoff + dy * i - 0.5);
    }
    ref1 = range(N - 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      rond = ref1[l];
      players = invert(globals.ronder[rond]);
      fill('black');
      text(rond, 7 + dx * rond, 2);
      if (rond === globals.rond) {
        markeraRond(rond, xoff, dx, yoff, dy, N);
      }
      ref2 = range(N);
      for (n = 0, len2 = ref2.length; n < len2; n++) {
        iPlace = ref2[n];
        iPlayer = players[iPlace];
        fill(['white', 'black'][iPlayer % 2]);
        text(iPlayer, 7 + dx * rond, yoff + dy * iPlace - 0.5);
      }
    }
    return grid(xoff, dx, N - 1, yoff - 3, dy, N);
  }

};

export var SC = class SC extends State {
  constructor(name) {
    var angle, i, k, len, ref, x, y;
    super(name);
    this.points = [];
    this.N = globals.N;
    angle = 360 / (this.N - 1);
    ref = range(this.N - 1);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      x = 50 + 35 * cos(angle * i);
      y = 50 + 35 * sin(angle * i);
      this.points.push([x, y]);
    }
    this.points.push([50, 50]);
  }

  makeLine(i, j) {
    var x0, x1, y0, y1;
    [x0, y0] = this.points[i];
    [x1, y1] = this.points[j];
    return line(x0, y0, x1, y1);
  }

  draw() {
    var i, k, l, len, len1, m, players, ref, ref1, results, rond, x, y;
    super.draw();
    rond = globals.rond;
    players = globals.ronder[rond];
    m = this.N / 2;
    ref = range(m + 1);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      this.makeLine(m - i, m + i - 1);
    }
    ref1 = range(this.N);
    results = [];
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      [x, y] = this.points[i];
      fill('gray');
      circle(x, y, 6);
      textSize(4);
      if (i === 0) {
        fill(['white', 'black'][i % 2]);
      } else if (i === this.N - 1) {
        fill(['white', 'black'][i % 2]);
      } else {
        fill(['white', 'black'][i % 2]);
      }
      //text players[i],x,y
      results.push(text(ALPHABET[players[i]], x, y + 0.25));
    }
    return results;
  }

};

export var SD = class SD extends State {
  draw() {
    var N, dx, dy, i, iPlace, iPlayer, k, l, len, len1, len2, n, players, ref, ref1, ref2, rond, x, y, yoff;
    super.draw();
    N = globals.N;
    dx = 5;
    dy = 4.5;
    yoff = 5;
    textSize(2);
    ref = range(N);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      fill('black');
      text(i + 1, 1.5, yoff + dy * i);
      text(ALPHABET[i], 3.5, yoff + dy * i);
    }
    ref1 = range(N - 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      rond = ref1[l];
      players = globals.ronder[rond];
      fill('black');
      text(rond + 1, 7 + dx * rond, yoff - 3);
      if (rond === globals.rond) {
        markeraRond(rond, dx - 0.5, dx, yoff, dy, N);
      }
      push();
      textSize(1.5);
      ref2 = range(N);
      for (n = 0, len2 = ref2.length; n < len2; n++) {
        iPlace = ref2[n];
        fill(['white', 'black'][iPlace % 2]);
        iPlayer = players[iPlace];
        textAlign([RIGHT, LEFT][iPlace % 2]);
        x = [9, 5][iPlace % 2];
        y = yoff + dy * iPlayer - 0.8;
        text(1 + players[N - iPlace - 1], x + dx * rond, y);
      }
      pop();
    }
    return grid(4.5, dx, N - 1, yoff - 2, dy, N);
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-008-Berger\coffee\states.coffee