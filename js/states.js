// Generated by CoffeeScript 2.5.1
var bergerSVG, common, crlf, dx, getLocalCoords, round3, saveData, svgdefs, svggrid, svgline, svgrect, svgtext, svguse, w, x;

import {
  globals,
  invert
} from './globals.js';

import {
  CRounded,
  CDead
} from './controls.js';

// import saveAs from './file-saver.js'
export var ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'; // spelare

// halvborden heter 1..52. Jämn är vit, udda är svart
export var grid = function(xoff, dx, nx, yoff, dy, ny) {
  var i, k, l, len, len1, ref, ref1, results;
  ref = range(ny + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    line(xoff, yoff + dy * i, xoff + nx * dx, yoff + dy * i);
  }
  ref1 = range(nx + 1);
  results = [];
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    i = ref1[l];
    results.push(line(xoff + dx * i, yoff, xoff + dx * i, yoff + ny * dy));
  }
  return results;
};

export var markeraRond = function(rond, xoff, dx, yoff, dy, N) {
  push();
  fill('lightgray');
  noStroke();
  rectMode(CORNER);
  rect(xoff + dx * rond, yoff, dx, N * dy);
  return pop();
};

saveData = function() {
  var a;
  a = document.createElement("a");
  //document.body.appendChild a # Skapar många downloads
  a.style = "display: none";
  return (data, fileName) => {
    var blob, url;
    blob = new Blob([data], {
      type: "octet/stream"
    });
    url = window.URL.createObjectURL(blob);
    a.href = url;
    a.download = fileName;
    a.click();
    return window.URL.revokeObjectURL(url);
  };
};

crlf = "\n";

round3 = function(x) {
  return Math.round(1000 * x) / 1000;
};

svgline = function(x1, y1, x2, y2) {
  return `<line x1=\"${x1}\" y1=\"${y1}\" x2=\"${x2}\" y2=\"${y2}\" stroke=\"black\"/>`;
};

svgrect = function(x, y, width, height) {
  return `<rect x=\"${x}\" y=\"${y}\" width=\"${width}\" height=\"${height}\" stroke=\"black\" fill-opacity=\"0.1\" />`;
};

svgtext = function(text, x, y, ta = 'middle', ts = 2) {
  return `<text font-size=\"${round3(ts)}em\" text-anchor=\"${ta}\" x=\"${x}\" y=\"${y}\">${text}</text>`;
};

svgdefs = function(id, body) {
  return crlf + "<defs>" + crlf + `<g id=\"${id}\" >` + crlf + body + "</g>" + crlf + "</defs>" + crlf;
};

svguse = function(id, x, y, skalax, skalay) {
  return `<use href=\"#${id}\" x=\"${x}\" y=\"${y}\" transform=\"scale(${skalax} ${skalay})\" />` + crlf;
};

svggrid = function(headers, ws, digits, n, dx, dy, totalWidth) {
  var anchor, big, digit, dist, i, j, k, l, len, len1, len2, len3, len4, m, medium, o, q, ref, ref1, ref2, ref3, ref4, res, row, small, ts, x0, y, y0;
  headers = headers.split(' ');
  res = [];
  x0 = 0;
  y = dy;
  big = dx / 30;
  medium = 0.75 * dx / 30;
  small = 0.50 * dx / 30;
  ref = range(headers.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    res.push(svgline(x0, y - dy, x0, y + dy * n));
    res.push(svgtext(headers[i], x0 + ws[i] / 2, 0.75 * dy, 'middle', big));
    x0 += ws[i];
  }
  res.push(svgline(x0, y - dy, x0, y + dy * n));
  ref1 = range(-1, n + 1);
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    i = ref1[l];
    res.push(svgline(0, y + dy * i, x0, y + dy * i));
  }
  ref2 = range(n);
  for (m = 0, len2 = ref2.length; m < len2; m++) {
    i = ref2[m];
    res.push(svgtext(i + 1, 0.5 * dx, y + dy * i + dy * 0.7, 'middle', big));
  }
  ref3 = range(digits.length);
  for (o = 0, len3 = ref3.length; o < len3; o++) {
    i = ref3[o];
    row = digits[i];
    x0 = ws[0] + ws[1] + dx * i + 0.5 * dx;
    ref4 = range(row.length);
    for (q = 0, len4 = ref4.length; q < len4; q++) {
      j = ref4[q];
      y0 = y + dy * j + 0.28 * dy;
      digit = row[j];
      if (digit < 0) {
        anchor = 'start';
        digit = -digit;
        dist = -dx * 0.45;
      } else {
        anchor = 'end';
        dist = dx * 0.45;
      }
      res.push(svgtext(digit, x0 + dist, y0, anchor, ts = small));
    }
  }
  res.push(svgtext('Berger - Round Robin', 0, dy * (n + 1.4), 'start', small));
  res.push(svgtext('Observera att placeringarna utgörs av BORDSNUMMER', totalWidth / 2, dy * (n + 1.4), 'middle', small));
  res.push(svgtext('Courtesy of Wasa SK', totalWidth, dy * (n + 1.4), 'end', small));
  return res.join(crlf);
};

bergerSVG = function(w, h) {
  var a, antalRonder, antalSpelare, b, c, dx, dy, i, j, k, l, len, len1, len2, len3, len4, len5, m, nx, ny, o, p, q, r, ref, ref1, ref2, ref3, ref4, res, skalax, skalay, spelare, tables, totalHeight, totalWidth, white, ws;
  tables = [];
  antalSpelare = globals.ronder[0].length; // antal spelare, alltid jämnt
  antalRonder = antalSpelare - 1;
  ref = range(antalRonder);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    spelare = invert(globals.ronder[i]);
    ref1 = range(antalSpelare);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      p = spelare[j];
      white = p % 2 === 0;
      if (p >= antalSpelare / 2) {
        p = antalRonder - p;
      }
      if (white) {
        p = p + 1;
      } else {
        p = -p - 1;
      }
      spelare[j] = p;
    }
    tables.push(spelare);
  }
  res = 'Nr Namn';
  dx = 1000 / globals.N;
  if (dx > 50) {
    dx = 50;
  }
  dy = 0.75 * dx;
  ws = [dx, 200];
  ref2 = range(globals.N - 1);
  for (m = 0, len2 = ref2.length; m < len2; m++) {
    i = ref2[m];
    res += ` ${i + 1}`;
    ws.push(dx);
  }
  res += ' Poäng Plats';
  ws.push(dx + dx);
  ws.push(dx + dx);
  totalWidth = 0;
  for (o = 0, len3 = ws.length; o < len3; o++) {
    w = ws[o];
    totalWidth += w;
  }
  totalHeight = dy * (globals.N + 2);
  a = svggrid(res, ws, tables, globals.N, dx, dy, totalWidth);
  b = svgdefs("berger", a);
  c = b;
  totalWidth += dx;
  [nx, ny] = [1, 1];
  if (globals.N === 4) {
    [nx, ny] = [2, 4];
  }
  if (globals.N === 6) {
    [nx, ny] = [2, 3];
  }
  if (globals.N === 8) {
    [nx, ny] = [2, 3];
  }
  if (globals.N === 10) {
    [nx, ny] = [2, 2];
  }
  if (globals.N === 12) {
    [nx, ny] = [2, 2];
  }
  //c += svgrect 0,0,1625,1140
  skalax = 1625 / nx / totalWidth;
  skalay = 1140 / ny / totalHeight;
  ref3 = range(nx);
  for (q = 0, len4 = ref3.length; q < len4; q++) {
    i = ref3[q];
    ref4 = range(ny);
    for (r = 0, len5 = ref4.length; r < len5; r++) {
      j = ref4[r];
      c += svguse("berger", i * totalWidth, j * totalHeight, skalax, skalay);
    }
  }
  return `<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='${1630}' height='${1140}' >` + c + '</svg>';
};

getLocalCoords = function() {
  var matrix, pd;
  matrix = drawingContext.getTransform();
  pd = pixelDensity();
  return matrix.inverse().transformPoint(new DOMPoint(mouseX * pd, mouseY * pd));
};

export var setState = function(key) {
  globals.currState = globals.states[key];
  common.A.disabled = key === 'SA';
  common.B.disabled = key === 'SB';
  common.C.disabled = key === 'SC';
  common.D.disabled = key === 'SD';
  common.E.disabled = key === 'SE';
  common.F.disabled = key === 'SF';
  return common.G.disabled = key === 'SG';
};

//common.H.disabled = key == 'SH'
export var setRond = function(delta) {
  globals.rond += delta;
  common.R0.visible = globals.rond > 0;
  common.R2.visible = globals.rond < globals.N - 2;
  return common.R1.text = `Rond:\n${globals.rond + 1}`;
};

export var setN = function(delta) {
  var N, k, key, len, players, ref, results, rond, state;
  globals.N += delta;
  globals.rond = 0;
  setRond(0);
  common.X0.visible = globals.N > 4;
  common.X2.visible = globals.N < ALPHABET.length;
  common.X1.text = `Spelare:\n${globals.N}`;
  N = globals.N;
  globals.ronder = [];
  ref = range(N - 1);
  for (k = 0, len = ref.length; k < len; k++) {
    rond = ref[k];
    players = range(N - 1);
    players = players.slice(N - 1 - rond).concat(players.slice(0, N - 1 - rond));
    players.push(N - 1);
    if (rond % 2 === 1) {
      [players[0], players[N - 1]] = [players[N - 1], players[0]];
    }
    globals.ronder.push(players);
  }
  results = [];
  for (key in globals.states) {
    state = globals.states[key];
    results.push(state.setN());
  }
  return results;
};

common = {};

x = 6.25;

dx = 100 / 8;

w = 100 / 8.5;

common.A = new CRounded(x + 0 * dx, 3, w, 5, 'Halvbord', () => {
  return setState('SA');
});

common.B = new CRounded(x + 1 * dx, 3, w, 5, 'Bord', () => {
  return setState('SB');
});

common.C = new CRounded(x + 2 * dx, 3, w, 5, "Cirkel", () => {
  return setState('SC');
});

common.D = new CRounded(x + 3 * dx, 3, w, 5, "Rotation", () => {
  return setState('SD');
});

common.E = new CRounded(x + 4 * dx, 3, w, 5, "Berger\nSpelare", () => {
  return setState('SE');
});

common.F = new CRounded(x + 5 * dx, 3, w, 5, 'Berger\nHalvbord', () => {
  return setState('SF');
});

common.G = new CRounded(x + 6 * dx, 3, w, 5, 'Berger\nBord', () => {
  return setState('SG');
});

common.H = new CRounded(x + 7 * dx, 3, w, 5, 'Download', () => {
  var data, fileName;
  data = bergerSVG(width, height);
  fileName = `${globals.N}.svg`;
  return saveData()(data, fileName);
});

//common.XSpelare = new CDead 25, 93.5,'Spelare:'
common.X0 = new CRounded(9 - 0.5, 97, 15, 5, '-2', () => {
  return setN(-2);
});

common.X1 = new CRounded(25 - 0.5, 97, 15, 5, 4);

common.X2 = new CRounded(41 - 0.5, 97, 15, 5, '+2', () => {
  return setN(+2);
});

common.X1.disabled = true;

//common.XRond = new CDead 75, 93.5,'Rond:'
common.R0 = new CRounded(59 + 0.5, 97, 15, 5, '-1', () => {
  return setRond(-1);
});

common.R1 = new CRounded(75 + 0.5, 97, 15, 5, 0);

common.R2 = new CRounded(91 + 0.5, 97, 15, 5, '+1', () => {
  return setRond(+1);
});

common.R1.disabled = true;

export var State = class State {
  constructor(name) {
    this.name = name;
    this.controls = common;
    this.setN();
  }

  drawControls() {
    var key, results;
    results = [];
    for (key in this.controls) {
      results.push(this.controls[key].draw());
    }
    return results;
  }

  mouseClicked() {
    var control, key, results, y;
    ({x, y} = getLocalCoords());
    results = [];
    for (key in this.controls) {
      control = this.controls[key];
      if (control.visible && !control.disabled && control.inside(x, y)) {
        if (control.click) {
          control.click();
        }
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGVzLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHN0YXRlcy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsU0FBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLGNBQUEsRUFBQSxNQUFBLEVBQUEsUUFBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLENBQUEsRUFBQTs7QUFBQSxPQUFBO0VBQVEsT0FBUjtFQUFnQixNQUFoQjtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFRLFFBQVI7RUFBaUIsS0FBakI7Q0FBQSxNQUFBLGdCQURBOzs7QUFJQSxPQUFBLElBQU8sUUFBQSxHQUFXLHVEQUpsQjs7O0FBT0EsT0FBQSxJQUFPLElBQUEsR0FBTyxRQUFBLENBQUMsSUFBRCxFQUFNLEVBQU4sRUFBUyxFQUFULEVBQWEsSUFBYixFQUFrQixFQUFsQixFQUFxQixFQUFyQixDQUFBO0FBQ2QsTUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUE7QUFBQztFQUFBLEtBQUEscUNBQUE7O0lBQUEsSUFBQSxDQUFLLElBQUwsRUFBZ0IsSUFBQSxHQUFLLEVBQUEsR0FBRyxDQUF4QixFQUEyQixJQUFBLEdBQUssRUFBQSxHQUFHLEVBQW5DLEVBQXVDLElBQUEsR0FBSyxFQUFBLEdBQUcsQ0FBL0M7RUFBQTtBQUNBO0FBQUE7RUFBQSxLQUFBLHdDQUFBOztpQkFBQSxJQUFBLENBQUssSUFBQSxHQUFLLEVBQUEsR0FBRyxDQUFiLEVBQWdCLElBQWhCLEVBQTJCLElBQUEsR0FBSyxFQUFBLEdBQUcsQ0FBbkMsRUFBdUMsSUFBQSxHQUFLLEVBQUEsR0FBRyxFQUEvQztFQUFBLENBQUE7O0FBRmE7O0FBSWQsT0FBQSxJQUFPLFdBQUEsR0FBYyxRQUFB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LE9BQU8sQ0FBQyxLQUFSLENBQUEsRUFBdEI7O0FBQ0EsY0FGRDtPQUFBLE1BQUE7NkJBQUE7O0lBRkQsQ0FBQTs7RUFGYzs7QUFQVCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Z2xvYmFscyxpbnZlcnR9IGZyb20gJy4vZ2xvYmFscy5qcydcclxuaW1wb3J0IHtDUm91bmRlZCxDRGVhZH0gZnJvbSAnLi9jb250cm9scy5qcydcclxuIyBpbXBvcnQgc2F2ZUFzIGZyb20gJy4vZmlsZS1zYXZlci5qcydcclxuXHJcbmV4cG9ydCBBTFBIQUJFVCA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JyAjIHNwZWxhcmVcclxuIyBoYWx2Ym9yZGVuIGhldGVyIDEuLjUyLiBKw6RtbiDDpHIgdml0LCB1ZGRhIMOkciBzdmFydFxyXG5cclxuZXhwb3J0IGdyaWQgPSAoeG9mZixkeCxueCwgeW9mZixkeSxueSkgLT5cclxuXHRsaW5lIHhvZmYsICAgICAgeW9mZitkeSppLCB4b2ZmK254KmR4LCB5b2ZmK2R5KmkgIGZvciBpIGluIHJhbmdlIG55KzFcclxuXHRsaW5lIHhvZmYrZHgqaSwgeW9mZiwgICAgICB4b2ZmK2R4KmksICB5b2ZmK255KmR5IGZvciBpIGluIHJhbmdlIG54KzFcclxuXHJcbmV4cG9ydCBtYXJrZXJhUm9uZCA9IChyb25kLHhvZmYsZHgseW9mZixkeSxOKSAtPlxyXG5cdHB1c2goKVxyXG5cdGZpbGwgJ2xpZ2h0Z3JheSdcclxuXHRub1N0cm9rZSgpXHJcblx0cmVjdE1vZGUgQ09STkVSXHJcblx0cmVjdCB4b2ZmK2R4KnJvbmQseW9mZixkeCxOKmR5XHJcblx0cG9wKClcclxuXHJcbnNhdmVEYXRhID0gLT5cclxuXHRhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBcImFcIlxyXG5cdCNkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkIGEgIyBTa2FwYXIgbcOlbmdhIGRvd25sb2Fkc1xyXG5cdGEuc3R5bGUgPSBcImRpc3BsYXk6IG5vbmVcIlxyXG5cdHJldHVybiAoZGF0YSwgZmlsZU5hbWUpID0+XHJcblx0XHRibG9iID0gbmV3IEJsb2IgW2RhdGFdLCB7dHlwZTogXCJvY3RldC9zdHJlYW1cIn1cclxuXHRcdHVybCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMIGJsb2JcclxuXHRcdGEuaHJlZiA9IHVybFxyXG5cdFx0YS5kb3dubG9hZCA9IGZpbGVOYW1lXHJcblx0XHRhLmNsaWNrKClcclxuXHRcdHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMIHVybFxyXG5cclxuY3JsZiA9IFwiXFxuXCJcclxucm91bmQzID0gKHgpIC0+IE1hdGgucm91bmQoMTAwMCp4KS8xMDAwXHJcblxyXG5zdmdsaW5lID0gKHgxLHkxLHgyLHkyKSAtPiBcIjxsaW5lIHgxPVxcXCIje3gxfVxcXCIgeTE9XFxcIiN7eTF9XFxcIiB4Mj1cXFwiI3t4Mn1cXFwiIHkyPVxcXCIje3kyfVxcXCIgc3Ryb2tlPVxcXCJibGFja1xcXCIvPlwiXHJcbnN2Z3JlY3QgPSAoeCx5LHdpZHRoLGhlaWdodCkgLT4gXCI8cmVjdCB4PVxcXCIje3h9XFxcIiB5PVxcXCIje3l9XFxcIiB3aWR0aD1cXFwiI3t3aWR0aH1cXFwiIGhlaWdodD1cXFwiI3toZWlnaHR9XFxcIiBzdHJva2U9XFxcImJsYWNrXFxcIiBmaWxsLW9wYWNpdHk9XFxcIjAuMVxcXCIgLz5cIlxyXG5zdmd0ZXh0ID0gKHRleHQseCx5LHRhPSdtaWRkbGUnLHRzPTIpIC0+IFwiPHRleHQgZm9udC1zaXplPVxcXCIje3JvdW5kMyB0c31lbVxcXCIgdGV4dC1hbmNob3I9XFxcIiN7dGF9XFxcIiB4PVxcXCIje3h9XFxcIiB5PVxcXCIje3l9XFxcIj4je3RleHR9PC90ZXh0PlwiXHJcbnN2Z2RlZnMgPSAoaWQsYm9keSkgLT4gY3JsZiArIFwiPGRlZnM+XCIgKyBjcmxmICsgXCI8ZyBpZD1cXFwiI3tpZH1cXFwiID5cIiArIGNybGYgKyBib2R5ICsgXCI8L2c+XCIrIGNybGYgKyBcIjwvZGVmcz5cIiArIGNybGZcclxuc3ZndXNlICA9IChpZCx4LHksc2thbGF4LHNrYWxheSkgLT4gXCI8dXNlIGhyZWY9XFxcIiMje2lkfVxcXCIgeD1cXFwiI3t4fVxcXCIgeT1cXFwiI3t5fVxcXCIgdHJhbnNmb3JtPVxcXCJzY2FsZSgje3NrYWxheH0gI3tza2FsYXl9KVxcXCIgLz5cIiArIGNybGZcclxuXHJcbnN2Z2dyaWQgPSAoaGVhZGVycyx3cyxkaWdpdHMsbixkeCxkeSx0b3RhbFdpZHRoKSAtPlxyXG5cdGhlYWRlcnMgPSBoZWFkZXJzLnNwbGl0ICcgJ1xyXG5cdHJlcyA9IFtdXHJcblx0eDAgPSAwXHJcblx0eSA9IGR5XHJcblx0YmlnICAgPSBkeC8zMFxyXG5cdG1lZGl1bSA9IDAuNzUqZHgvMzBcclxuXHRzbWFsbCA9IDAuNTAqZHgvMzBcclxuXHRmb3IgaSBpbiByYW5nZSBoZWFkZXJzLmxlbmd0aFxyXG5cdFx0cmVzLnB1c2ggc3ZnbGluZSB4MCx5LWR5LHgwLHkrZHkqblxyXG5cdFx0cmVzLnB1c2ggc3ZndGV4dCBoZWFkZXJzW2ldLHgwK3dzW2ldLzIsMC43NSpkeSwnbWlkZGxlJyxiaWdcclxuXHRcdHgwICs9IHdzW2ldXHJcblx0cmVzLnB1c2ggc3ZnbGluZSB4MCx5LWR5LHgwLHkrZHkqblxyXG5cclxuXHRmb3IgaSBpbiByYW5nZSAtMSxuKzFcclxuXHRcdHJlcy5wdXNoIHN2Z2xpbmUgMCx5K2R5KmkseDAseStkeSppXHJcblx0Zm9yIGkgaW4gcmFuZ2UgblxyXG5cdFx0cmVzLnB1c2ggc3ZndGV4dCBpKzEsMC41KmR4LHkrZHkqaStkeSowLjcsJ21pZGRsZScsYmlnXHJcblxyXG5cdGZvciBpIGluIHJhbmdlIGRpZ2l0cy5sZW5ndGhcclxuXHRcdHJvdyA9IGRpZ2l0c1tpXVxyXG5cdFx0eDAgPSB3c1swXSArIHdzWzFdICsgZHgqaSArIDAuNSpkeFxyXG5cdFx0Zm9yIGogaW4gcmFuZ2Ugcm93Lmxlbmd0aFxyXG5cdFx0XHR5MCA9IHkgKyBkeSpqICsgMC4yOCpkeVxyXG5cdFx0XHRkaWdpdCA9IHJvd1tqXVxyXG5cdFx0XHRpZiBkaWdpdCA8IDBcclxuXHRcdFx0XHRhbmNob3IgPSAnc3RhcnQnXHJcblx0XHRcdFx0ZGlnaXQgPSAtZGlnaXRcclxuXHRcdFx0XHRkaXN0ID0gLWR4KjAuNDVcclxuXHRcdFx0ZWxzZSBcclxuXHRcdFx0XHRhbmNob3IgPSAnZW5kJ1xyXG5cdFx0XHRcdGRpc3QgPSBkeCowLjQ1XHJcblx0XHRcdHJlcy5wdXNoIHN2Z3RleHQgZGlnaXQseDArZGlzdCx5MCxhbmNob3IsdHM9c21hbGxcclxuXHRyZXMucHVzaCBzdmd0ZXh0ICdCZXJnZXIgLSBSb3VuZCBSb2JpbicsMCxkeSoobisxLjQpLCdzdGFydCcsc21hbGxcclxuXHRyZXMucHVzaCBzdmd0ZXh0ICdPYnNlcnZlcmEgYXR0IHBsYWNlcmluZ2FybmEgdXRnw7ZycyBhdiBCT1JEU05VTU1FUicsdG90YWxXaWR0aC8yLGR5KihuKzEuNCksJ21pZGRsZScsc21hbGxcclxuXHRyZXMucHVzaCBzdmd0ZXh0ICdDb3VydGVzeSBvZiBXYXNhIFNLJyx0b3RhbFdpZHRoLGR5KihuKzEuNCksJ2VuZCcsc21hbGxcclxuXHRyZXMuam9pbiBjcmxmXHJcblxyXG5iZXJnZXJTVkcgPSAodyxoKSAtPlxyXG5cdHRhYmxlcyA9IFtdXHJcblx0YW50YWxTcGVsYXJlID0gZ2xvYmFscy5yb25kZXJbMF0ubGVuZ3RoICMgYW50YWwgc3BlbGFyZSwgYWxsdGlkIGrDpG1udFxyXG5cdGFudGFsUm9uZGVyID0gYW50YWxTcGVsYXJlIC0gMVxyXG5cdGZvciBpIGluIHJhbmdlIGFudGFsUm9uZGVyXHJcblx0XHRzcGVsYXJlID0gaW52ZXJ0IGdsb2JhbHMucm9uZGVyW2ldXHJcblx0XHRmb3IgaiBpbiByYW5nZSBhbnRhbFNwZWxhcmVcclxuXHRcdFx0cCA9IHNwZWxhcmVbal1cclxuXHRcdFx0d2hpdGUgPSBwICUgMiA9PSAwXHJcblx0XHRcdGlmIHAgPj0gYW50YWxTcGVsYXJlLzIgdGhlbiBwID0gYW50YWxSb25kZXItcFxyXG5cdFx0XHRpZiB3aGl0ZSB0aGVuIHAgPSBwKzEgZWxzZSBwPS1wLTFcclxuXHRcdFx0c3BlbGFyZVtqXSA9IHBcclxuXHRcdHRhYmxlcy5wdXNoIHNwZWxhcmVcclxuXHJcblx0cmVzID0gJ05yIE5hbW4nXHJcblx0ZHggPSAxMDAwL2dsb2JhbHMuTlxyXG5cdGlmIGR4PjUwIHRoZW4gZHg9NTBcclxuXHRkeSA9IDAuNzUgKiBkeFxyXG5cdHdzID0gW2R4LDIwMF1cclxuXHRmb3IgaSBpbiByYW5nZSBnbG9iYWxzLk4tMVxyXG5cdFx0cmVzICs9IFwiICN7aSsxfVwiXHJcblx0XHR3cy5wdXNoIGR4XHJcblx0cmVzICs9ICcgUG/DpG5nIFBsYXRzJ1xyXG5cdHdzLnB1c2ggZHgrZHhcclxuXHR3cy5wdXNoIGR4K2R4IFxyXG5cdHRvdGFsV2lkdGggPSAwXHJcblx0dG90YWxXaWR0aCArPSB3IGZvciB3IGluIHdzXHJcblx0dG90YWxIZWlnaHQgPSBkeSAqIChnbG9iYWxzLk4gKyAyKVxyXG5cclxuXHRhID0gc3ZnZ3JpZCByZXMsd3MsdGFibGVzLGdsb2JhbHMuTixkeCxkeSx0b3RhbFdpZHRoXHJcblx0YiA9IHN2Z2RlZnMgXCJiZXJnZXJcIiwgYVxyXG5cdGMgPSBiXHJcblxyXG5cdHRvdGFsV2lkdGggKz0gZHhcclxuXHJcblx0W254LG55XSA9IFsxLDFdXHJcblx0aWYgZ2xvYmFscy5OID09ICA0IHRoZW4gW254LG55XSA9IFsyLDRdXHJcblx0aWYgZ2xvYmFscy5OID09ICA2IHRoZW4gW254LG55XSA9IFsyLDNdXHJcblx0aWYgZ2xvYmFscy5OID09ICA4IHRoZW4gW254LG55XSA9IFsyLDNdXHJcblx0aWYgZ2xvYmFscy5OID09IDEwIHRoZW4gW254LG55XSA9IFsyLDJdXHJcblx0aWYgZ2xvYmFscy5OID09IDEyIHRoZW4gW254LG55XSA9IFsyLDJdXHJcblxyXG5cdCNjICs9IHN2Z3JlY3QgMCwwLDE2MjUsMTE0MFxyXG5cclxuXHRza2FsYXggPSAxNjI1L254IC8gdG90YWxXaWR0aFxyXG5cdHNrYWxheSA9IDExNDAvbnkgLyB0b3RhbEhlaWdodFxyXG5cclxuXHRmb3IgaSBpbiByYW5nZSBueFxyXG5cdFx0Zm9yIGogaW4gcmFuZ2UgbnlcclxuXHRcdFx0YyArPSBzdmd1c2UgXCJiZXJnZXJcIiwgaSp0b3RhbFdpZHRoLCBqKnRvdGFsSGVpZ2h0LCBza2FsYXgsIHNrYWxheVxyXG5cdFwiPHN2ZyB2ZXJzaW9uPScxLjEnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycgeG1sbnM6eGxpbms9J2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnIHdpZHRoPScjezE2MzB9JyBoZWlnaHQ9JyN7MTE0MH0nID5cIiArIGMgKyAnPC9zdmc+J1xyXG5cclxuZ2V0TG9jYWxDb29yZHMgPSAtPlxyXG5cdG1hdHJpeCA9IGRyYXdpbmdDb250ZXh0LmdldFRyYW5zZm9ybSgpXHJcblx0cGQgPSBwaXhlbERlbnNpdHkoKVxyXG5cdG1hdHJpeC5pbnZlcnNlKCkudHJhbnNmb3JtUG9pbnQgbmV3IERPTVBvaW50IG1vdXNlWCAqIHBkLG1vdXNlWSAqIHBkXHJcblxyXG5leHBvcnQgc2V0U3RhdGUgPSAoa2V5KSAtPlxyXG5cdGdsb2JhbHMuY3VyclN0YXRlID0gZ2xvYmFscy5zdGF0ZXNba2V5XVxyXG5cdGNvbW1vbi5BLmRpc2FibGVkID0ga2V5ID09ICdTQSdcclxuXHRjb21tb24uQi5kaXNhYmxlZCA9IGtleSA9PSAnU0InXHJcblx0Y29tbW9uLkMuZGlzYWJsZWQgPSBrZXkgPT0gJ1NDJ1xyXG5cdGNvbW1vbi5ELmRpc2FibGVkID0ga2V5ID09ICdTRCdcclxuXHRjb21tb24uRS5kaXNhYmxlZCA9IGtleSA9PSAnU0UnXHJcblx0Y29tbW9uLkYuZGlzYWJsZWQgPSBrZXkgPT0gJ1NGJ1xyXG5cdGNvbW1vbi5HLmRpc2FibGVkID0ga2V5ID09ICdTRydcclxuXHQjY29tbW9uLkguZGlzYWJsZWQgPSBrZXkgPT0gJ1NIJ1xyXG5cclxuZXhwb3J0IHNldFJvbmQgPSAoZGVsdGEpIC0+XHJcblx0Z2xvYmFscy5yb25kICs9IGRlbHRhXHJcblx0Y29tbW9uLlIwLnZpc2libGUgPSBnbG9iYWxzLnJvbmQgPiAwXHJcblx0Y29tbW9uLlIyLnZpc2libGUgPSBnbG9iYWxzLnJvbmQgPCBnbG9iYWxzLk4tMlxyXG5cdGNvbW1vbi5SMS50ZXh0ID0gXCJSb25kOlxcbiN7Z2xvYmFscy5yb25kICsgMX1cIlxyXG5cclxuZXhwb3J0IHNldE4gPSAoZGVsdGEpIC0+XHJcblx0Z2xvYmFscy5OICs9IGRlbHRhXHJcblx0Z2xvYmFscy5yb25kID0gMFxyXG5cdHNldFJvbmQgMFxyXG5cdGNvbW1vbi5YMC52aXNpYmxlID0gZ2xvYmFscy5OID4gNFxyXG5cdGNvbW1vbi5YMi52aXNpYmxlID0gZ2xvYmFscy5OIDwgQUxQSEFCRVQubGVuZ3RoXHJcblx0Y29tbW9uLlgxLnRleHQgPSBcIlNwZWxhcmU6XFxuI3tnbG9iYWxzLk59XCJcclxuXHJcblx0TiA9IGdsb2JhbHMuTlxyXG5cdGdsb2JhbHMucm9uZGVyID0gW11cclxuXHRmb3Igcm9uZCBpbiByYW5nZSBOLTFcclxuXHRcdHBsYXllcnMgPSByYW5nZSBOLTFcclxuXHRcdHBsYXllcnMgPSBwbGF5ZXJzLnNsaWNlKE4tMS1yb25kKS5jb25jYXQgcGxheWVycy5zbGljZSgwLE4tMS1yb25kKVxyXG5cdFx0cGxheWVycy5wdXNoIE4tMVxyXG5cdFx0aWYgcm9uZCUyPT0xIHRoZW4gW3BsYXllcnNbMF0scGxheWVyc1tOLTFdXSA9IFtwbGF5ZXJzW04tMV0scGxheWVyc1swXV1cclxuXHRcdGdsb2JhbHMucm9uZGVyLnB1c2ggcGxheWVyc1xyXG5cdGZvciBrZXkgb2YgZ2xvYmFscy5zdGF0ZXNcclxuXHRcdHN0YXRlID0gZ2xvYmFscy5zdGF0ZXNba2V5XVxyXG5cdFx0c3RhdGUuc2V0TigpXHJcblxyXG5jb21tb24gPSB7fVxyXG54ID0gNi4yNVxyXG5keCA9IDEwMC84XHJcbncgPSAxMDAvOC41XHJcbmNvbW1vbi5BICA9IG5ldyBDUm91bmRlZCB4KzAqZHgsIDMsIHcsIDUsICdIYWx2Ym9yZCcsICAgICAgICAgPT4gc2V0U3RhdGUgJ1NBJ1xyXG5jb21tb24uQiAgPSBuZXcgQ1JvdW5kZWQgeCsxKmR4LCAzLCB3LCA1LCAnQm9yZCcsICAgICAgICAgICAgID0+IHNldFN0YXRlICdTQidcclxuY29tbW9uLkMgID0gbmV3IENSb3VuZGVkIHgrMipkeCwgMywgdywgNSwgXCJDaXJrZWxcIiwgICAgICAgICAgID0+IHNldFN0YXRlICdTQydcclxuY29tbW9uLkQgID0gbmV3IENSb3VuZGVkIHgrMypkeCwgMywgdywgNSwgXCJSb3RhdGlvblwiLCAgICAgICAgID0+IHNldFN0YXRlICdTRCdcclxuY29tbW9uLkUgID0gbmV3IENSb3VuZGVkIHgrNCpkeCwgMywgdywgNSwgXCJCZXJnZXJcXG5TcGVsYXJlXCIsICA9PiBzZXRTdGF0ZSAnU0UnXHJcbmNvbW1vbi5GICA9IG5ldyBDUm91bmRlZCB4KzUqZHgsIDMsIHcsIDUsICdCZXJnZXJcXG5IYWx2Ym9yZCcsID0+IHNldFN0YXRlICdTRidcclxuY29tbW9uLkcgID0gbmV3IENSb3VuZGVkIHgrNipkeCwgMywgdywgNSwgJ0JlcmdlclxcbkJvcmQnLCAgICAgPT4gc2V0U3RhdGUgJ1NHJ1xyXG5jb21tb24uSCAgPSBuZXcgQ1JvdW5kZWQgeCs3KmR4LCAzLCB3LCA1LCAnRG93bmxvYWQnLCA9PlxyXG5cdGRhdGEgPSBiZXJnZXJTVkcgd2lkdGgsaGVpZ2h0XHJcblx0ZmlsZU5hbWUgPSBcIiN7Z2xvYmFscy5OfS5zdmdcIlxyXG5cdHNhdmVEYXRhKCkgZGF0YSwgZmlsZU5hbWVcclxuXHJcbiNjb21tb24uWFNwZWxhcmUgPSBuZXcgQ0RlYWQgMjUsIDkzLjUsJ1NwZWxhcmU6J1xyXG5jb21tb24uWDAgPSBuZXcgQ1JvdW5kZWQgIDktMC41LCA5NywgMTUsIDUsICctMicsID0+IHNldE4gLTJcclxuY29tbW9uLlgxID0gbmV3IENSb3VuZGVkIDI1LTAuNSwgOTcsIDE1LCA1LCA0XHJcbmNvbW1vbi5YMiA9IG5ldyBDUm91bmRlZCA0MS0wLjUsIDk3LCAxNSwgNSwgJysyJywgPT4gc2V0TiArMlxyXG5jb21tb24uWDEuZGlzYWJsZWQgPSB0cnVlXHJcblxyXG4jY29tbW9uLlhSb25kID0gbmV3IENEZWFkIDc1LCA5My41LCdSb25kOidcclxuY29tbW9uLlIwID0gbmV3IENSb3VuZGVkIDU5KzAuNSwgOTcsIDE1LCA1LCAnLTEnLCA9PiBzZXRSb25kIC0xXHJcbmNvbW1vbi5SMSA9IG5ldyBDUm91bmRlZCA3NSswLjUsIDk3LCAxNSwgNSwgMFxyXG5jb21tb24uUjIgPSBuZXcgQ1JvdW5kZWQgOTErMC41LCA5NywgMTUsIDUsICcrMScsID0+IHNldFJvbmQgKzFcclxuY29tbW9uLlIxLmRpc2FibGVkID0gdHJ1ZVxyXG5cclxuZXhwb3J0IGNsYXNzIFN0YXRlXHJcblx0Y29uc3RydWN0b3IgOiAoQG5hbWUpIC0+XHJcblx0XHRAY29udHJvbHMgPSBjb21tb25cclxuXHRcdEBzZXROKClcclxuXHJcblx0ZHJhd0NvbnRyb2xzIDogLT4gQGNvbnRyb2xzW2tleV0uZHJhdygpIGZvciBrZXkgb2YgQGNvbnRyb2xzXHJcblxyXG5cdG1vdXNlQ2xpY2tlZCA6IC0+XHJcblx0XHR7eCx5fSA9IGdldExvY2FsQ29vcmRzKClcclxuXHRcdGZvciBrZXkgb2YgQGNvbnRyb2xzXHJcblx0XHRcdGNvbnRyb2wgPSBAY29udHJvbHNba2V5XVxyXG5cdFx0XHRpZiBjb250cm9sLnZpc2libGUgYW5kIG5vdCBjb250cm9sLmRpc2FibGVkIGFuZCBjb250cm9sLmluc2lkZSB4LCB5XHJcblx0XHRcdFx0aWYgY29udHJvbC5jbGljayB0aGVuIGNvbnRyb2wuY2xpY2soKVxyXG5cdFx0XHRcdGJyZWFrXHJcbiJdfQ==
//# sourceURL=c:\github\2022-008-Berger\coffee\states.coffee