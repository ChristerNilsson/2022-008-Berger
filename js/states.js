// Generated by CoffeeScript 2.5.1
var common, getLocalCoords;

import {
  globals,
  invert
} from './globals.js';

import {
  CRounded,
  CDead
} from './controls.js';

export var ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'; // spelare

// halvborden heter 1..52. Jämn är vit, udda är svart
export var grid = function(xoff, dx, nx, yoff, dy, ny) {
  var i, j, k, len, len1, ref, ref1, results;
  ref = range(ny + 1);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    line(xoff, yoff + dy * i, xoff + nx * dx, yoff + dy * i);
  }
  ref1 = range(nx + 1);
  results = [];
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    i = ref1[k];
    results.push(line(xoff + dx * i, yoff, xoff + dx * i, yoff + ny * dy));
  }
  return results;
};

export var markeraRond = function(rond, xoff, dx, yoff, dy, N) {
  push();
  fill('lightgray');
  noStroke();
  rectMode(CORNER);
  rect(xoff + dx * rond, yoff, dx, N * dy);
  return pop();
};

getLocalCoords = function() {
  var matrix, pd;
  matrix = drawingContext.getTransform();
  pd = pixelDensity();
  return matrix.inverse().transformPoint(new DOMPoint(mouseX * pd, mouseY * pd));
};

export var setState = function(key) {
  globals.currState = globals.states[key];
  common.A.disabled = key === 'SA';
  common.B.disabled = key === 'SB';
  common.C.disabled = key === 'SC';
  common.D.disabled = key === 'SD';
  return common.E.disabled = key === 'SE';
};

export var setRond = function(delta) {
  globals.rond += delta;
  common.R0.visible = globals.rond > 0;
  common.R2.visible = globals.rond < globals.N - 2;
  return common.R1.text = `Rond:\n${globals.rond + 1}`;
};

export var setN = function(delta) {
  var N, j, key, len, players, ref, results, rond, state;
  globals.N += delta;
  globals.rond = 0;
  setRond(0);
  common.X0.visible = globals.N > 4;
  common.X2.visible = globals.N < ALPHABET.length;
  common.X1.text = `Spelare:\n${globals.N}`;
  N = globals.N;
  globals.ronder = [];
  ref = range(N - 1);
  for (j = 0, len = ref.length; j < len; j++) {
    rond = ref[j];
    players = range(N - 1);
    players = players.slice(N - 1 - rond).concat(players.slice(0, N - 1 - rond));
    players.push(N - 1);
    if (rond % 2 === 1) {
      [players[0], players[N - 1]] = [players[N - 1], players[0]];
    }
    globals.ronder.push(players);
  }
  results = [];
  for (key in globals.states) {
    state = globals.states[key];
    results.push(state.setN());
  }
  return results;
};

common = {};

common.A = new CRounded(10, 3, 19, 5, 'Halvbord', () => {
  return setState('SA');
});

common.B = new CRounded(30, 3, 19, 5, "Cirkel", () => {
  return setState('SB');
});

common.C = new CRounded(50, 3, 19, 5, "Rotation", () => {
  return setState('SC');
});

common.D = new CRounded(70, 3, 19, 5, "Berger\nSpelare", () => {
  return setState('SD');
});

common.E = new CRounded(90, 3, 19, 5, 'Berger\nHalvbord', () => {
  return setState('SE');
});

//common.XSpelare = new CDead 25, 93.5,'Spelare:'
common.X0 = new CRounded(9 - 0.5, 97, 15, 5, '-2', () => {
  return setN(-2);
});

common.X1 = new CRounded(25 - 0.5, 97, 15, 5, 4);

common.X2 = new CRounded(41 - 0.5, 97, 15, 5, '+2', () => {
  return setN(+2);
});

common.X1.disabled = true;

//common.XRond = new CDead 75, 93.5,'Rond:'
common.R0 = new CRounded(59 + 0.5, 97, 15, 5, '-1', () => {
  return setRond(-1);
});

common.R1 = new CRounded(75 + 0.5, 97, 15, 5, 0);

common.R2 = new CRounded(91 + 0.5, 97, 15, 5, '+1', () => {
  return setRond(+1);
});

common.R1.disabled = true;

export var State = class State {
  constructor(name) {
    this.name = name;
    this.controls = common;
    this.setN();
  }

  draw() {
    var key, results;
    results = [];
    for (key in this.controls) {
      results.push(this.controls[key].draw());
    }
    return results;
  }

  mouseClicked() {
    var control, key, results, x, y;
    ({x, y} = getLocalCoords());
    results = [];
    for (key in this.controls) {
      control = this.controls[key];
      if (control.visible && !control.disabled && control.inside(x, y)) {
        if (control.click) {
          control.click();
        }
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-008-Berger\coffee\states.coffee