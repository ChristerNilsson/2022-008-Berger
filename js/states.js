// Generated by CoffeeScript 2.5.1
var ALPHABET, common, getLocalCoords, grid, markeraRond;

import {
  globals,
  rotera,
  invert
} from './globals.js';

import {
  CRounded,
  CDead
} from './controls.js';

ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄ'; // spelare

// halvborden heter 1..28. Jämn är vit, udda är svart
grid = function(xoff, dx, nx, yoff, dy, ny) {
  var i, k, l, len, len1, ref, ref1, results;
  ref = range(ny + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    line(xoff, yoff + dy * i, xoff + nx * dx, yoff + dy * i);
  }
  ref1 = range(nx + 1);
  results = [];
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    i = ref1[l];
    results.push(line(xoff + dx * i, yoff, xoff + dx * i, yoff + ny * dy));
  }
  return results;
};

markeraRond = function(rond, xoff, dx, yoff, dy, N) {
  push();
  fill('lightgray');
  noStroke();
  rectMode(CORNER);
  rect(xoff + dx * rond, yoff, dx, N * dy);
  return pop();
};

getLocalCoords = function() {
  var matrix, pd;
  matrix = drawingContext.getTransform();
  pd = pixelDensity();
  return matrix.inverse().transformPoint(new DOMPoint(mouseX * pd, mouseY * pd));
};

export var setState = function(key) {
  globals.currState = globals.states[key];
  common.A.disabled = key === 'SA';
  common.B.disabled = key === 'SB';
  common.C.disabled = key === 'SC';
  common.D.disabled = key === 'SD';
  return common.E.disabled = key === 'SE';
};

export var setRond = function(delta) {
  globals.rond += delta;
  common.R0.visible = globals.rond > 0;
  common.R2.visible = globals.rond < globals.N - 2;
  return common.R1.text = globals.rond + 1;
};

export var setN = function(delta) {
  var N, k, key, len, players, ref, results, rond, state;
  globals.N += delta;
  globals.rond = 0;
  setRond(0);
  common.X0.visible = globals.N > 4;
  common.X2.visible = globals.N < 28;
  common.X1.text = globals.N;
  N = globals.N;
  globals.ronder = [];
  ref = range(N - 1);
  for (k = 0, len = ref.length; k < len; k++) {
    rond = ref[k];
    players = range(N - 1);
    players = players.slice(N - 1 - rond).concat(players.slice(0, N - 1 - rond));
    players.push(N - 1);
    if (rond % 2 === 1) {
      [players[0], players[N - 1]] = [players[N - 1], players[0]];
    }
    globals.ronder.push(players);
  }
  results = [];
  for (key in globals.states) {
    state = globals.states[key];
    results.push(state.setN());
  }
  return results;
};

common = {};

common.A = new CRounded(7, 96.5, 12, 6, 'Halvbord', () => {
  return setState('SA');
});

common.B = new CRounded(20, 96.5, 12, 6, "Cirkel", () => {
  return setState('SB');
});

common.C = new CRounded(33, 96.5, 12, 6, "Rotation", () => {
  return setState('SC');
});

common.D = new CRounded(46, 96.5, 12, 6, "Berger\nSpelare", () => {
  return setState('SD');
});

common.E = new CRounded(59, 96.5, 12, 6, 'Berger\nHalvbord', () => {
  return setState('SE');
});

common.XSpelare = new CDead(74, 93.5, 'Spelare:');

common.X0 = new CRounded(69, 97, 5, 5, '-2', () => {
  return setN(-2);
});

common.X1 = new CRounded(74, 97, 5, 5, 4);

common.X2 = new CRounded(79, 97, 5, 5, '+2', () => {
  return setN(+2);
});

common.X1.disabled = true;

common.XRond = new CDead(91, 93.5, 'Rond:');

common.R0 = new CRounded(86, 97, 5, 5, '-1', () => {
  return setRond(-1);
});

common.R1 = new CRounded(91, 97, 5, 5, 0);

common.R2 = new CRounded(96, 97, 5, 5, '+1', () => {
  return setRond(+1);
});

common.R1.disabled = true;

export var State = class State {
  constructor(name1) {
    this.name = name1;
    this.controls = common;
  }

  draw() {
    var key, results;
    results = [];
    for (key in this.controls) {
      results.push(this.controls[key].draw());
    }
    return results;
  }

  mouseClicked() {
    var control, key, results, x, y;
    ({x, y} = getLocalCoords());
    results = [];
    for (key in this.controls) {
      control = this.controls[key];
      if (control.visible && !control.disabled && control.inside(x, y)) {
        if (control.click) {
          control.click();
        }
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

export var SA = class SA extends State { // Halvbord
  constructor(name) {
    super(name);
    this.setN();
  }

  setN() {
    var i, k, l, len, len1, ref, ref1, results, x1;
    // bygg koordinatlistor
    this.N = globals.N;
    this.dx = 100 / (this.N + 2) * 2;
    this.dy = 0.9 * this.dx;
    this.x = [];
    this.y = [];
    ref = range(this.N / 2);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      this.x.push(this.dx + i * this.dx);
      this.y.push(45 - this.dy / 2);
    }
    x1 = this.x.slice();
    _.reverse(this.x);
    this.x = x1.concat(this.x);
    ref1 = range(this.N / 2);
    results = [];
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      results.push(this.y.push(45 + this.dy / 2));
    }
    return results;
  }

  draw() {
    var iPlace, k, len, players, ref, results, y;
    super.draw();
    players = globals.ronder[globals.rond];
    textSize(this.dx / 2);
    ref = range(this.N);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      iPlace = ref[k];
      fill('gray');
      rect(this.x[iPlace], this.y[iPlace], this.dx, this.dx);
      fill(['white', 'black'][iPlace % 2]);
      text(1 + iPlace, this.x[iPlace], this.y[iPlace] + 0.5);
      y = iPlace >= this.N / 2 ? 0.9 * this.dy : -0.75 * this.dy;
      fill(players[iPlace] === 0 ? 'red' : 'black');
      results.push(text(ALPHABET[players[iPlace]], this.x[iPlace], this.y[iPlace] + y));
    }
    return results;
  }

};

export var SB = class SB extends State { // Cirkel
  constructor(name) {
    super(name);
    this.setN();
  }

  setN() {
    var angle, i, k, len, ref, x, y;
    this.points = [];
    this.N = globals.N;
    angle = 360 / (this.N - 1);
    ref = range(this.N - 1);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      x = 50 + 35 * cos(angle * i);
      y = 50 + 35 * sin(angle * i);
      this.points.push([x, y]);
    }
    return this.points.push([50, 50]);
  }

  makeLine(i, j) {
    var x0, x1, y0, y1;
    [x0, y0] = this.points[i];
    [x1, y1] = this.points[j];
    return line(x0, y0, x1, y1);
  }

  draw() {
    var i, k, l, len, len1, m, players, ref, ref1, results, rond, x, y;
    super.draw();
    rond = globals.rond;
    players = globals.ronder[rond];
    m = this.N / 2;
    ref = range(m + 1);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      this.makeLine(m - i, m + i - 1);
    }
    ref1 = range(this.N);
    results = [];
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      [x, y] = this.points[i];
      fill(players[i] === 0 ? 'red' : 'gray');
      circle(x, y, 6);
      textSize(4);
      if (i === 0) {
        fill(['white', 'black'][i % 2]);
      } else if (i === this.N - 1) {
        fill(['white', 'black'][i % 2]);
      } else {
        fill(['white', 'black'][i % 2]);
      }
      results.push(text(ALPHABET[players[i]], x, y + 0.25));
    }
    return results;
  }

};

export var SC = class SC extends State { // Rotation
  constructor(name) {
    super(name);
    this.setN();
  }

  setN() {
    var angle, i, k, len, ref, x, y;
    this.points = [];
    this.N = globals.N;
    angle = 360 / (this.N - 1);
    ref = range(this.N - 1);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      x = 50 + 35 * cos(angle * i);
      y = 50 + 35 * sin(angle * i);
      this.points.push([x, y]);
    }
    return this.points.push([50, 50]);
  }

  makeLine(i, j) {
    var x0, x1, y0, y1, z;
    z = rotera(range(this.N), -globals.rond);
    [x0, y0] = this.points[z[i]];
    [x1, y1] = this.points[z[j]];
    return line(x0, y0, x1, y1);
  }

  draw() {
    var i, k, l, len, len1, m, players, ref, ref1, results, rond, x, y;
    super.draw();
    rond = globals.rond;
    players = invert(globals.ronder[rond]);
    m = this.N / 2;
    ref = range(m + 1);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      this.makeLine(m - i, m + i - 1);
    }
    ref1 = range(this.N);
    results = [];
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      [x, y] = this.points[i];
      fill(i === 0 ? 'red' : 'gray');
      circle(x, y, 6);
      textSize(4);
      fill(['white', 'black'][players[i] % 2]);
      results.push(text(ALPHABET[i], x, y + 0.25));
    }
    return results;
  }

};

export var SD = class SD extends State { // Berger Halvbord
  constructor(name) {
    super(name);
    this.setN();
  }

  setN() {
    this.N = globals.N;
    this.dx = 99 / this.N;
    this.dy = 92 / (this.N + 1);
    this.xoff = this.dx;
    return this.yoff = this.dy;
  }

  draw() {
    var i, iPlace, iPlayer, k, l, len, len1, len2, n, players, ref, ref1, ref2, rond, x, y;
    super.draw();
    textSize(0.5 * this.dy);
    ref = range(this.N);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      fill('black');
      text(i + 1, 0.25 * this.dx, this.yoff + this.dy / 2 + this.dy * i);
      fill(i === 0 ? 'red' : 'black');
      text(ALPHABET[i], 0.75 * this.dx, this.yoff + this.dy / 2 + this.dy * i);
    }
    ref1 = range(this.N - 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      rond = ref1[l];
      players = globals.ronder[rond];
      if (rond === globals.rond) {
        markeraRond(rond, this.xoff, this.dx, this.yoff, this.dy, this.N);
      }
      fill('black');
      text(rond + 1, this.dx * 1.5 + this.dx * rond, this.yoff / 2);
      push();
      textSize(0.5 * this.dy);
      ref2 = range(this.N);
      for (n = 0, len2 = ref2.length; n < len2; n++) {
        iPlace = ref2[n];
        fill(['white', 'black'][iPlace % 2]);
        iPlayer = players[iPlace];
        textAlign([RIGHT, LEFT][iPlace % 2]);
        x = this.xoff + this.dx / 2 + this.dx * rond + [0.45 * this.dx, -0.45 * this.dx][iPlace % 2];
        y = this.yoff + 0.3 * this.dy + this.dy * iPlayer;
        text(1 + players[this.N - iPlace - 1], x, y);
      }
      pop();
    }
    return grid(this.xoff, this.dx, this.N - 1, this.yoff, this.dy, this.N);
  }

};

export var SE = class SE extends State { // Berger Spelare
  constructor(name) {
    super(name);
    this.setN();
  }

  setN() {
    this.N = globals.N;
    this.dx = 99 / this.N;
    this.dy = 92 / (this.N + 1);
    this.xoff = this.dx;
    return this.yoff = this.dy;
  }

  draw() {
    var i, iPlace, iPlayer, k, l, len, len1, len2, n, players, ref, ref1, ref2, rond;
    super.draw();
    textSize(this.dy / 2);
    ref = range(this.N);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      fill(i === 0 ? 'red' : 'black');
      text(ALPHABET[i], this.dx / 2, this.yoff + this.dy / 2 + this.dy * i);
    }
    ref1 = range(this.N - 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      rond = ref1[l];
      players = invert(globals.ronder[rond]);
      fill('black');
      text(rond + 1, this.dx * 1.5 + this.dx * rond, this.yoff / 2);
      if (rond === globals.rond) {
        markeraRond(rond, this.xoff, this.dx, this.yoff, this.dy, this.N);
      }
      ref2 = range(this.N);
      for (n = 0, len2 = ref2.length; n < len2; n++) {
        iPlace = ref2[n];
        iPlayer = players[iPlace];
        fill(['white', 'black'][iPlayer % 2]);
        text(iPlayer + 1, this.xoff + this.dx / 2 + this.dx * rond, this.yoff + this.dy / 2 + this.dy * iPlace);
      }
    }
    return grid(this.xoff, this.dx, this.N - 1, this.yoff, this.dy, this.N);
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-008-Berger\coffee\states.coffee