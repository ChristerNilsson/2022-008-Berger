// Generated by CoffeeScript 2.5.1
var bergerSVG, common, crlf, dx, getLocalCoords, round3, saveData, svgdefs, svggrid, svgline, svgrect, svgtext, svguse, w, x;

import {
  globals,
  invert
} from './globals.js';

import {
  CRounded,
  CDead
} from './controls.js';

export var ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'; // spelare

// halvborden heter 1..52. Jämn är vit, udda är svart
export var grid = function(xoff, dx, nx, yoff, dy, ny) {
  var i, k, l, len, len1, ref, ref1, results;
  ref = range(ny + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    line(xoff, yoff + dy * i, xoff + nx * dx, yoff + dy * i);
  }
  ref1 = range(nx + 1);
  results = [];
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    i = ref1[l];
    results.push(line(xoff + dx * i, yoff, xoff + dx * i, yoff + ny * dy));
  }
  return results;
};

export var markeraRond = function(rond, xoff, dx, yoff, dy, N) {
  push();
  fill('lightgray');
  noStroke();
  rectMode(CORNER);
  rect(xoff + dx * rond, yoff, dx, N * dy);
  return pop();
};

saveData = function() {
  var a;
  a = document.createElement("a");
  //document.body.appendChild a # Skapar många downloads
  a.style = "display: none";
  return (data, fileName) => {
    var blob, url;
    blob = new Blob([data], {
      type: "octet/stream"
    });
    url = window.URL.createObjectURL(blob);
    a.href = url;
    a.download = fileName;
    a.click();
    return window.URL.revokeObjectURL(url);
  };
};

crlf = "\n";

round3 = function(x) {
  return Math.round(1000 * x) / 1000;
};

svgline = function(x1, y1, x2, y2) {
  return `<line x1=\"${x1}\" y1=\"${y1}\" x2=\"${x2}\" y2=\"${y2}\" stroke=\"black\"/>`;
};

svgrect = function(x, y, width, height) {
  return `<rect x=\"${x}\" y=\"${y}\" width=\"${width}\" height=\"${height}\" stroke=\"black\" fill-opacity=\"0.1\" />`;
};

svgtext = function(text, x, y, ta = 'middle', ts = 2) {
  return `<text font-size=\"${round3(ts)}em\" text-anchor=\"${ta}\" x=\"${x}\" y=\"${y}\">${text}</text>`;
};

svgdefs = function(id, body) {
  return crlf + "<defs>" + crlf + `<g id=\"${id}\" >` + crlf + body + "</g>" + crlf + "</defs>" + crlf;
};

svguse = function(id, x, y, skalax, skalay) {
  return `<use href=\"#${id}\" x=\"${x}\" y=\"${y}\" transform=\"scale(${skalax} ${skalay})\" />` + crlf;
};

svggrid = function(headers, ws, digits, n, dx, dy, totalWidth) {
  var anchor, big, digit, dist, i, j, k, l, len, len1, len2, len3, len4, m, medium, o, q, ref, ref1, ref2, ref3, ref4, res, row, small, ts, x0, y, y0;
  headers = headers.split(' ');
  res = [];
  x0 = 0;
  y = dy;
  big = dx / 30;
  medium = 0.75 * dx / 30;
  small = 0.50 * dx / 30;
  ref = range(headers.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    res.push(svgline(x0, y - dy, x0, y + dy * n));
    res.push(svgtext(headers[i], x0 + ws[i] / 2, 0.75 * dy, 'middle', big));
    x0 += ws[i];
  }
  res.push(svgline(x0, y - dy, x0, y + dy * n));
  ref1 = range(-1, n + 1);
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    i = ref1[l];
    res.push(svgline(0, y + dy * i, x0, y + dy * i));
  }
  ref2 = range(n);
  for (m = 0, len2 = ref2.length; m < len2; m++) {
    i = ref2[m];
    res.push(svgtext(i + 1, 0.5 * dx, y + dy * i + dy * 0.7, 'middle', big));
  }
  ref3 = range(digits.length);
  for (o = 0, len3 = ref3.length; o < len3; o++) {
    i = ref3[o];
    row = digits[i];
    x0 = ws[0] + ws[1] + dx * i + 0.5 * dx;
    ref4 = range(row.length);
    for (q = 0, len4 = ref4.length; q < len4; q++) {
      j = ref4[q];
      y0 = y + dy * j + 0.28 * dy;
      digit = row[j];
      if (digit < 0) {
        anchor = 'start';
        digit = -digit;
        dist = -dx * 0.45;
      } else {
        anchor = 'end';
        dist = dx * 0.45;
      }
      res.push(svgtext(digit, x0 + dist, y0, anchor, ts = small));
    }
  }
  res.push(svgtext('Berger - Round Robin', 0, dy * (n + 1.4), 'start', small));
  res.push(svgtext('Observera att placeringarna utgörs av BORDSNUMMER', totalWidth / 2, dy * (n + 1.4), 'middle', small));
  res.push(svgtext('Courtesy of Wasa SK', totalWidth, dy * (n + 1.4), 'end', small));
  return res.join(crlf);
};

bergerSVG = function(w, h) {
  var a, antalRonder, antalSpelare, b, c, dx, dy, i, j, k, l, len, len1, len2, len3, len4, len5, m, nx, ny, o, p, q, r, ref, ref1, ref2, ref3, ref4, res, skalax, skalay, spelare, tables, totalHeight, totalWidth, white, ws;
  tables = [];
  antalSpelare = globals.ronder[0].length; // antal spelare, alltid jämnt
  antalRonder = antalSpelare - 1;
  ref = range(antalRonder);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    spelare = invert(globals.ronder[i]);
    ref1 = range(antalSpelare);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      p = spelare[j];
      white = p % 2 === 0;
      if (p >= antalSpelare / 2) {
        p = antalRonder - p;
      }
      if (white) {
        p = p + 1;
      } else {
        p = -p - 1;
      }
      spelare[j] = p;
    }
    tables.push(spelare);
  }
  res = 'Nr Namn';
  dx = 1000 / globals.N;
  if (dx > 50) {
    dx = 50;
  }
  dy = 0.75 * dx;
  ws = [dx, 200];
  ref2 = range(globals.N - 1);
  for (m = 0, len2 = ref2.length; m < len2; m++) {
    i = ref2[m];
    res += ` ${i + 1}`;
    ws.push(dx);
  }
  res += ' Poäng Plats';
  ws.push(dx + dx);
  ws.push(dx + dx);
  totalWidth = 0;
  for (o = 0, len3 = ws.length; o < len3; o++) {
    w = ws[o];
    totalWidth += w;
  }
  totalHeight = dy * (globals.N + 2);
  a = svggrid(res, ws, tables, globals.N, dx, dy, totalWidth);
  b = svgdefs("berger", a);
  c = b;
  totalWidth += dx;
  [nx, ny] = [1, 1];
  if (globals.N === 4) {
    [nx, ny] = [2, 4];
  }
  if (globals.N === 6) {
    [nx, ny] = [2, 3];
  }
  if (globals.N === 8) {
    [nx, ny] = [2, 3];
  }
  if (globals.N === 10) {
    [nx, ny] = [2, 2];
  }
  if (globals.N === 12) {
    [nx, ny] = [2, 2];
  }
  //c += svgrect 0,0,1625,1140
  skalax = 1625 / nx / totalWidth;
  skalay = 1140 / ny / totalHeight;
  ref3 = range(nx);
  for (q = 0, len4 = ref3.length; q < len4; q++) {
    i = ref3[q];
    ref4 = range(ny);
    for (r = 0, len5 = ref4.length; r < len5; r++) {
      j = ref4[r];
      c += svguse("berger", i * totalWidth, j * totalHeight, skalax, skalay);
    }
  }
  return `<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='${1630}' height='${1140}' >` + c + '</svg>';
};

getLocalCoords = function() {
  var matrix, pd;
  matrix = drawingContext.getTransform();
  pd = pixelDensity();
  return matrix.inverse().transformPoint(new DOMPoint(mouseX * pd, mouseY * pd));
};

export var setState = function(key) {
  globals.currState = globals.states[key];
  common.A.disabled = key === 'SA';
  common.B.disabled = key === 'SB';
  common.C.disabled = key === 'SC';
  common.D.disabled = key === 'SD';
  common.E.disabled = key === 'SE';
  common.F.disabled = key === 'SF';
  return common.G.disabled = key === 'SG';
};

//common.H.disabled = key == 'SH'
export var setRond = function(delta) {
  globals.rond += delta;
  common.R0.visible = globals.rond > 0;
  common.R2.visible = globals.rond < globals.N - 2;
  return common.R1.text = `Rond:\n${globals.rond + 1}`;
};

export var setN = function(delta) {
  var N, k, key, len, players, ref, results, rond, state;
  globals.N += delta;
  globals.rond = 0;
  setRond(0);
  common.X0.visible = globals.N > 4;
  common.X2.visible = globals.N < ALPHABET.length;
  common.X1.text = `Spelare:\n${globals.N}`;
  N = globals.N;
  globals.ronder = [];
  ref = range(N - 1);
  for (k = 0, len = ref.length; k < len; k++) {
    rond = ref[k];
    players = range(N - 1);
    players = players.slice(N - 1 - rond).concat(players.slice(0, N - 1 - rond));
    players.push(N - 1);
    if (rond % 2 === 1) {
      [players[0], players[N - 1]] = [players[N - 1], players[0]];
    }
    globals.ronder.push(players);
  }
  results = [];
  for (key in globals.states) {
    state = globals.states[key];
    results.push(state.setN());
  }
  return results;
};

common = {};

x = 6.25;

dx = 100 / 8;

w = 100 / 8.5;

common.A = new CRounded(x + 0 * dx, 3, w, 5, 'Halvbord', () => {
  return setState('SA');
});

common.B = new CRounded(x + 1 * dx, 3, w, 5, 'Bord', () => {
  return setState('SB');
});

common.C = new CRounded(x + 2 * dx, 3, w, 5, "Cirkel", () => {
  return setState('SC');
});

common.D = new CRounded(x + 3 * dx, 3, w, 5, "Rotation", () => {
  return setState('SD');
});

common.E = new CRounded(x + 4 * dx, 3, w, 5, "Berger\nSpelare", () => {
  return setState('SE');
});

common.F = new CRounded(x + 5 * dx, 3, w, 5, 'Berger\nHalvbord', () => {
  return setState('SF');
});

common.G = new CRounded(x + 6 * dx, 3, w, 5, 'Berger\nBord', () => {
  return setState('SG');
});

common.H = new CRounded(x + 7 * dx, 3, w, 5, 'Download', () => {
  var data, fileName;
  data = bergerSVG(width, height);
  fileName = `${globals.N}.svg`;
  return saveData()(data, fileName);
});

common.X0 = new CRounded(9 - 0.5, 97, 15, 5, '-2', () => {
  return setN(-2);
});

common.X1 = new CRounded(25 - 0.5, 97, 15, 5, 4);

common.X2 = new CRounded(41 - 0.5, 97, 15, 5, '+2', () => {
  return setN(+2);
});

common.X1.disabled = true;

common.R0 = new CRounded(59 + 0.5, 97, 15, 5, '-1', () => {
  return setRond(-1);
});

common.R1 = new CRounded(75 + 0.5, 97, 15, 5, 0);

common.R2 = new CRounded(91 + 0.5, 97, 15, 5, '+1', () => {
  return setRond(+1);
});

common.R1.disabled = true;

export var State = class State {
  constructor(name) {
    this.name = name;
    this.controls = common;
    this.setN();
  }

  drawControls() {
    var key, results;
    results = [];
    for (key in this.controls) {
      results.push(this.controls[key].draw());
    }
    return results;
  }

  mouseClicked() {
    var control, key, results, y;
    ({x, y} = getLocalCoords());
    results = [];
    for (key in this.controls) {
      control = this.controls[key];
      if (control.visible && !control.disabled && control.inside(x, y)) {
        if (control.click) {
          control.click();
        }
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-008-Berger\coffee\states.coffee