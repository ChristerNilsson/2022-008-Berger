// Generated by CoffeeScript 2.5.1
import {
  globals
} from './globals.js';

import {
  ALPHABET,
  State,
  grid,
  markeraRond
} from './states.js';

export var SE = class SE extends State { // Berger Halvbord
  setN() {
    this.N = globals.N;
    this.dx = 99 / this.N;
    if (this.dx > 10) {
      this.dx = 10;
    }
    this.dy = (100 - 12) / (this.N + 1);
    if (this.dy > 10) {
      this.dy = 10;
    }
    this.xoff = this.dx;
    return this.yoff = 6 + this.dy;
  }

  draw() {
    var i, iPlace, iPlayer, j, k, l, len, len1, len2, players, ref, ref1, ref2, rond, x, y;
    //super()
    textSize(0.5 * this.dy);
    ref = range(this.N);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      fill('black');
      text(i + 1, 0.25 * this.dx, this.yoff + this.dy / 2 + this.dy * i);
      fill(i === 0 ? 'red' : 'black');
      text(ALPHABET[i], 0.75 * this.dx, this.yoff + this.dy / 2 + this.dy * i);
    }
    ref1 = range(this.N - 1);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      rond = ref1[k];
      players = globals.ronder[rond];
      if (rond === globals.rond) {
        markeraRond(rond, this.xoff, this.dx, this.yoff, this.dy, this.N);
      }
      fill('black');
      text(rond + 1, this.dx * 1.5 + this.dx * rond, this.yoff * 0.85);
      push();
      textSize(0.5 * this.dy);
      ref2 = range(this.N);
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        iPlace = ref2[l];
        fill(['white', 'black'][iPlace % 2]);
        iPlayer = players[iPlace];
        textAlign([RIGHT, LEFT][iPlace % 2]);
        x = this.xoff + this.dx / 2 + this.dx * rond + [0.45 * this.dx, -0.45 * this.dx][iPlace % 2];
        y = this.yoff + 0.3 * this.dy + this.dy * iPlayer;
        text(1 + players[this.N - iPlace - 1], x, y);
      }
      pop();
    }
    return grid(this.xoff, this.dx, this.N - 1, this.yoff, this.dy, this.N);
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU0UuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcU0UuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFBO0VBQVEsT0FBUjtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFRLFFBQVI7RUFBa0IsS0FBbEI7RUFBeUIsSUFBekI7RUFBK0IsV0FBL0I7Q0FBQSxNQUFBOztBQUVBLE9BQUEsSUFBYSxLQUFOLE1BQUEsR0FBQSxRQUFpQixNQUFqQixDQUFBO0VBRU4sSUFBTyxDQUFBLENBQUE7SUFDTixJQUFDLENBQUEsQ0FBRCxHQUFLLE9BQU8sQ0FBQztJQUNiLElBQUMsQ0FBQSxFQUFELEdBQU0sRUFBQSxHQUFHLElBQUMsQ0FBQTtJQUNWLElBQUcsSUFBQyxDQUFBLEVBQUQsR0FBTSxFQUFUO01BQWlCLElBQUMsQ0FBQSxFQUFELEdBQUksR0FBckI7O0lBQ0EsSUFBQyxDQUFBLEVBQUQsR0FBTSxDQUFDLEdBQUEsR0FBSSxFQUFMLENBQUEsR0FBUyxDQUFDLElBQUMsQ0FBQSxDQUFELEdBQUcsQ0FBSjtJQUNmLElBQUcsSUFBQyxDQUFBLEVBQUQsR0FBTSxFQUFUO01BQWlCLElBQUMsQ0FBQSxFQUFELEdBQUksR0FBckI7O0lBQ0EsSUFBQyxDQUFBLElBQUQsR0FBUSxJQUFDLENBQUE7V0FDVCxJQUFDLENBQUEsSUFBRCxHQUFRLENBQUEsR0FBRSxJQUFDLENBQUE7RUFQTDs7RUFTUCxJQUFPLENBQUEsQ0FBQTtBQUNSLFFBQUEsQ0FBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQTs7SUFDRSxRQUFBLENBQVMsR0FBQSxHQUFJLElBQUMsQ0FBQSxFQUFkO0FBQ0E7SUFBQSxLQUFBLHFDQUFBOztNQUNDLElBQUEsQ0FBSyxPQUFMO01BQ0EsSUFBQSxDQUFLLENBQUEsR0FBRSxDQUFQLEVBQW1CLElBQUEsR0FBSyxJQUFDLENBQUEsRUFBekIsRUFBNkIsSUFBQyxDQUFBLElBQUQsR0FBTSxJQUFDLENBQUEsRUFBRCxHQUFJLENBQVYsR0FBWSxJQUFDLENBQUEsRUFBRCxHQUFJLENBQTdDO01BQ0EsSUFBQSxDQUFRLENBQUEsS0FBRyxDQUFOLEdBQWEsS0FBYixHQUF3QixPQUE3QjtNQUNBLElBQUEsQ0FBSyxRQUFRLENBQUMsQ0FBRCxDQUFiLEVBQWlCLElBQUEsR0FBSyxJQUFDLENBQUEsRUFBdkIsRUFBMkIsSUFBQyxDQUFBLElBQUQsR0FBTSxJQUFDLENBQUEsRUFBRCxHQUFJLENBQVYsR0FBWSxJQUFDLENBQUEsRUFBRCxHQUFJLENBQTNDO0lBSkQ7QUFNQTtJQUFBLEtBQUEsd0NBQUE7O01BQ0MsT0FBQSxHQUFVLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBRDtNQUV4QixJQUFHLElBQUEsS0FBUSxPQUFPLENBQUMsSUFBbkI7UUFBNkIsV0FBQSxDQUFZLElBQVosRUFBaUIsSUFBQyxDQUFBLElBQWxCLEVBQXVCLElBQUMsQ0FBQSxFQUF4QixFQUEyQixJQUFDLENBQUEsSUFBNUIsRUFBaUMsSUFBQyxDQUFBLEVBQWxDLEVBQXFDLElBQUMsQ0FBQSxDQUF0QyxFQUE3Qjs7TUFDQSxJQUFBLENBQUssT0FBTDtNQUNBLElBQUEsQ0FBSyxJQUFBLEdBQUssQ0FBVixFQUFZLElBQUMsQ0FBQSxFQUFELEdBQUksR0FBSixHQUFRLElBQUMsQ0FBQSxFQUFELEdBQUksSUFBeEIsRUFBNkIsSUFBQyxDQUFBLElBQUQsR0FBTSxJQUFuQztNQUVBLElBQUEsQ0FBQTtNQUNBLFFBQUEsQ0FBUyxHQUFBLEdBQUksSUFBQyxDQUFBLEVBQWQ7QUFDQTtNQUFBLEtBQUEsd0NBQUE7O1FBQ0MsSUFBQSxDQUFLLENBQUMsT0FBRCxFQUFTLE9BQVQsQ0FBaUIsQ0FBQyxNQUFBLEdBQU8sQ0FBUixDQUF0QjtRQUNBLE9BQUEsR0FBVSxPQUFPLENBQUMsTUFBRDtRQUNqQixTQUFBLENBQVUsQ0FBQyxLQUFELEVBQU8sSUFBUCxDQUFZLENBQUMsTUFBQSxHQUFTLENBQVYsQ0FBdEI7UUFDQSxDQUFBLEdBQUksSUFBQyxDQUFBLElBQUQsR0FBUSxJQUFDLENBQUEsRUFBRCxHQUFJLENBQVosR0FBYyxJQUFDLENBQUEsRUFBRCxHQUFJLElBQWxCLEdBQXlCLENBQUMsSUFBQSxHQUFLLElBQUMsQ0FBQSxFQUFQLEVBQVUsQ0FBQyxJQUFELEdBQU0sSUFBQyxDQUFBLEVBQWpCLENBQW9CLENBQUMsTUFBQSxHQUFTLENBQVY7UUFDakQsQ0FBQSxHQUFJLElBQUMsQ0FBQSxJQUFELEdBQVEsR0FBQSxHQUFJLElBQUMsQ0FBQSxFQUFiLEdBQWdCLElBQUMsQ0FBQSxFQUFELEdBQUk7UUFDeEIsSUFBQSxDQUFLLENBQUEsR0FBRSxPQUFPLENBQUMsSUFBQyxDQUFBLENBQUQsR0FBRyxNQUFILEdBQVUsQ0FBWCxDQUFkLEVBQTRCLENBQTVCLEVBQThCLENBQTlCO01BTkQ7TUFRQSxHQUFBLENBQUE7SUFqQkQ7V0FtQkEsSUFBQSxDQUFLLElBQUMsQ0FBQSxJQUFOLEVBQVcsSUFBQyxDQUFBLEVBQVosRUFBZ0IsSUFBQyxDQUFBLENBQUQsR0FBRyxDQUFuQixFQUFzQixJQUFDLENBQUEsSUFBdkIsRUFBNkIsSUFBQyxDQUFBLEVBQTlCLEVBQWtDLElBQUMsQ0FBQSxDQUFuQztFQTVCTTs7QUFYRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Z2xvYmFsc30gZnJvbSAnLi9nbG9iYWxzLmpzJ1xyXG5pbXBvcnQge0FMUEhBQkVULCBTdGF0ZSwgZ3JpZCwgbWFya2VyYVJvbmR9IGZyb20gJy4vc3RhdGVzLmpzJ1xyXG5cclxuZXhwb3J0IGNsYXNzIFNFIGV4dGVuZHMgU3RhdGUgIyBCZXJnZXIgSGFsdmJvcmRcclxuXHJcblx0c2V0TiA6IC0+XHJcblx0XHRATiA9IGdsb2JhbHMuTlxyXG5cdFx0QGR4ID0gOTkvQE5cclxuXHRcdGlmIEBkeCA+IDEwIHRoZW4gQGR4PTEwXHJcblx0XHRAZHkgPSAoMTAwLTEyKS8oQE4rMSlcclxuXHRcdGlmIEBkeSA+IDEwIHRoZW4gQGR5PTEwXHJcblx0XHRAeG9mZiA9IEBkeFxyXG5cdFx0QHlvZmYgPSA2K0BkeVxyXG5cclxuXHRkcmF3IDogLT5cclxuXHRcdCNzdXBlcigpXHJcblx0XHR0ZXh0U2l6ZSAwLjUqQGR5XHJcblx0XHRmb3IgaSBpbiByYW5nZSBATlxyXG5cdFx0XHRmaWxsICdibGFjaydcclxuXHRcdFx0dGV4dCBpKzEsICAgICAgICAgIDAuMjUqQGR4LCBAeW9mZitAZHkvMitAZHkqaVxyXG5cdFx0XHRmaWxsIGlmIGk9PTAgdGhlbiAncmVkJyBlbHNlICdibGFjaydcclxuXHRcdFx0dGV4dCBBTFBIQUJFVFtpXSwwLjc1KkBkeCwgQHlvZmYrQGR5LzIrQGR5KmlcclxuXHJcblx0XHRmb3Igcm9uZCBpbiByYW5nZSBATi0xXHJcblx0XHRcdHBsYXllcnMgPSBnbG9iYWxzLnJvbmRlcltyb25kXVxyXG5cclxuXHRcdFx0aWYgcm9uZCA9PSBnbG9iYWxzLnJvbmQgdGhlbiBtYXJrZXJhUm9uZCByb25kLEB4b2ZmLEBkeCxAeW9mZixAZHksQE5cclxuXHRcdFx0ZmlsbCAnYmxhY2snXHJcblx0XHRcdHRleHQgcm9uZCsxLEBkeCoxLjUrQGR4KnJvbmQsQHlvZmYqMC44NVxyXG5cclxuXHRcdFx0cHVzaCgpXHJcblx0XHRcdHRleHRTaXplIDAuNSpAZHlcclxuXHRcdFx0Zm9yIGlQbGFjZSBpbiByYW5nZSBATlxyXG5cdFx0XHRcdGZpbGwgWyd3aGl0ZScsJ2JsYWNrJ11baVBsYWNlJTJdXHJcblx0XHRcdFx0aVBsYXllciA9IHBsYXllcnNbaVBsYWNlXVxyXG5cdFx0XHRcdHRleHRBbGlnbiBbUklHSFQsTEVGVF1baVBsYWNlICUgMl1cclxuXHRcdFx0XHR4ID0gQHhvZmYgKyBAZHgvMitAZHgqcm9uZCArIFswLjQ1KkBkeCwtMC40NSpAZHhdW2lQbGFjZSAlIDJdXHJcblx0XHRcdFx0eSA9IEB5b2ZmICsgMC4zKkBkeStAZHkqaVBsYXllclxyXG5cdFx0XHRcdHRleHQgMStwbGF5ZXJzW0BOLWlQbGFjZS0xXSx4LHlcclxuXHJcblx0XHRcdHBvcCgpXHJcblxyXG5cdFx0Z3JpZCBAeG9mZixAZHgsIEBOLTEsIEB5b2ZmLCBAZHksIEBOXHJcbiJdfQ==
//# sourceURL=c:\github\2022-008-Berger\coffee\SE.coffee