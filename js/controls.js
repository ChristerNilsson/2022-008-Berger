// Generated by CoffeeScript 2.5.1
var boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  globals
} from './globals.js';

export var Control = class Control {
  constructor(x1, y1, w1, h1, text1 = '', bg = 'black', fg1 = 'white') {
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.text = text1;
    this.bg = bg;
    this.fg = fg1;
    this.visible = true;
    this.disabled = false;
    this.textSize = 2.5;
  }

  draw() {
    return console.log('Control.draw must be overriden!');
  }

  inside(x, y) {
    var ref, ref1, w;
    w = this.w * [height / width, width / height][1 - globals.TOGGLE];
    return (-w / 2 <= (ref = x - this.x) && ref <= w / 2) && (-this.h / 2 <= (ref1 = y - this.y) && ref1 <= this.h / 2);
  }

};

export var CDead = class CDead extends Control {
  constructor(x, y, text, fg = 'white') {
    super(x, y, 0, 0, text, 'black', fg);
  }

  draw() {
    push();
    textSize(2.5);
    fill('black');
    text(this.text, this.x, this.y);
    return pop();
  }

};

export var CRounded = class CRounded extends Control {
  constructor(x, y, w, h, text = '', clicker = null) {
    super(x, y, w, h, text, 'black', 'white');
    this.click = this.click.bind(this);
    this.clicker = clicker;
  }

  draw() {
    if (this.visible) {
      push();
      fill(this.disabled ? "gray" : 'black');
      rect(this.x, this.y, this.w, this.h, this.h / 2);
      textSize(this.textSize);
      fill(this.disabled ? "black" : 'white');
      text(this.text, this.x, this.y);
      return pop();
    }
  }

  click() {
    boundMethodCheck(this, CRounded);
    if (this.clicker) {
      return this.clicker();
    }
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbHMuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcY29udHJvbHMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBOztBQUFBLE9BQUE7RUFBUSxPQUFSO0NBQUEsTUFBQTs7QUFFQSxPQUFBLElBQWEsVUFBTixNQUFBLFFBQUE7RUFDTixXQUFjLEdBQUEsSUFBQSxJQUFBLElBQUEsVUFBbUIsRUFBbkIsT0FBMEIsT0FBMUIsUUFBc0MsT0FBdEMsQ0FBQTtJQUFDLElBQUMsQ0FBQTtJQUFFLElBQUMsQ0FBQTtJQUFFLElBQUMsQ0FBQTtJQUFFLElBQUMsQ0FBQTtJQUFFLElBQUMsQ0FBQTtJQUFRLElBQUMsQ0FBQTtJQUFXLElBQUMsQ0FBQTtJQUNoRCxJQUFDLENBQUEsT0FBRCxHQUFXO0lBQ1gsSUFBQyxDQUFBLFFBQUQsR0FBWTtJQUNaLElBQUMsQ0FBQSxRQUFELEdBQVk7RUFIQzs7RUFJZCxJQUFPLENBQUEsQ0FBQTtXQUFHLE9BQU8sQ0FBQyxHQUFSLENBQVksaUNBQVo7RUFBSDs7RUFDUCxNQUFTLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBQTtBQUNWLFFBQUEsR0FBQSxFQUFBLElBQUEsRUFBQTtJQUFFLENBQUEsR0FBSSxJQUFDLENBQUEsQ0FBRCxHQUFLLENBQUMsTUFBQSxHQUFPLEtBQVIsRUFBYyxLQUFBLEdBQU0sTUFBcEIsQ0FBMkIsQ0FBQyxDQUFBLEdBQUUsT0FBTyxDQUFDLE1BQVg7V0FDcEMsQ0FBQSxDQUFDLENBQUQsR0FBRyxDQUFILFdBQVEsQ0FBQSxHQUFFLElBQUMsQ0FBQSxFQUFYLE9BQUEsSUFBZ0IsQ0FBQSxHQUFFLENBQWxCLENBQUEsSUFBd0IsQ0FBQSxDQUFDLElBQUMsQ0FBQSxDQUFGLEdBQUksQ0FBSixZQUFTLENBQUEsR0FBRSxJQUFDLENBQUEsRUFBWixRQUFBLElBQWlCLElBQUMsQ0FBQSxDQUFELEdBQUcsQ0FBcEI7RUFGaEI7O0FBTkg7O0FBVVAsT0FBQSxJQUFhLFFBQU4sTUFBQSxNQUFBLFFBQW9CLFFBQXBCO0VBQ04sV0FBYyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssSUFBTCxFQUFVLEtBQUcsT0FBYixDQUFBO1NBQ2IsQ0FBTSxDQUFOLEVBQVEsQ0FBUixFQUFVLENBQVYsRUFBWSxDQUFaLEVBQWMsSUFBZCxFQUFtQixPQUFuQixFQUEyQixFQUEzQjtFQURhOztFQUVkLElBQU8sQ0FBQSxDQUFBO0lBQ04sSUFBQSxDQUFBO0lBQ0EsUUFBQSxDQUFTLEdBQVQ7SUFDQSxJQUFBLENBQUssT0FBTDtJQUNBLElBQUEsQ0FBSyxJQUFDLENBQUEsSUFBTixFQUFXLElBQUMsQ0FBQSxDQUFaLEVBQWMsSUFBQyxDQUFBLENBQWY7V0FDQSxHQUFBLENBQUE7RUFMTTs7QUFIRDs7QUFVUCxPQUFBLElBQWEsV0FBTixNQUFBLFNBQUEsUUFBdUIsUUFBdkI7RUFDTixXQUFjLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLE9BQUssRUFBZCxZQUEyQixJQUEzQixDQUFBOztRQVdkLENBQUEsWUFBQSxDQUFBO0lBWGdDLElBQUMsQ0FBQTtFQUFuQjs7RUFFZCxJQUFPLENBQUEsQ0FBQTtJQUNOLElBQUcsSUFBQyxDQUFBLE9BQUo7TUFDQyxJQUFBLENBQUE7TUFDQSxJQUFBLENBQVEsSUFBQyxDQUFBLFFBQUosR0FBa0IsTUFBbEIsR0FBOEIsT0FBbkM7TUFDQSxJQUFBLENBQUssSUFBQyxDQUFBLENBQU4sRUFBUSxJQUFDLENBQUEsQ0FBVCxFQUFXLElBQUMsQ0FBQSxDQUFaLEVBQWMsSUFBQyxDQUFBLENBQWYsRUFBaUIsSUFBQyxDQUFBLENBQUQsR0FBRyxDQUFwQjtNQUNBLFFBQUEsQ0FBUyxJQUFDLENBQUEsUUFBVjtNQUNBLElBQUEsQ0FBUSxJQUFDLENBQUEsUUFBSixHQUFrQixPQUFsQixHQUErQixPQUFwQztNQUNBLElBQUEsQ0FBSyxJQUFDLENBQUEsSUFBTixFQUFXLElBQUMsQ0FBQSxDQUFaLEVBQWMsSUFBQyxDQUFBLENBQWY7YUFDQSxHQUFBLENBQUEsRUFQRDs7RUFETTs7RUFTUCxLQUFRLENBQUEsQ0FBQTsyQkFaSTtJQVlELElBQUcsSUFBQyxDQUFBLE9BQUo7YUFBaUIsSUFBQyxDQUFBLE9BQUQsQ0FBQSxFQUFqQjs7RUFBSDs7QUFaRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Z2xvYmFsc30gZnJvbSAnLi9nbG9iYWxzLmpzJ1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbnRyb2xcclxuXHRjb25zdHJ1Y3RvciA6IChAeCxAeSxAdyxAaCxAdGV4dD0nJyxAYmc9J2JsYWNrJyxAZmc9J3doaXRlJykgLT5cclxuXHRcdEB2aXNpYmxlID0gdHJ1ZVxyXG5cdFx0QGRpc2FibGVkID0gZmFsc2VcclxuXHRcdEB0ZXh0U2l6ZSA9IDIuNVxyXG5cdGRyYXcgOiAtPiBjb25zb2xlLmxvZyAnQ29udHJvbC5kcmF3IG11c3QgYmUgb3ZlcnJpZGVuISdcclxuXHRpbnNpZGUgOiAoeCx5KSAtPlxyXG5cdFx0dyA9IEB3ICogW2hlaWdodC93aWR0aCx3aWR0aC9oZWlnaHRdWzEtZ2xvYmFscy5UT0dHTEVdXHJcblx0XHQtdy8yIDw9IHgtQHggPD0gdy8yIGFuZCAtQGgvMiA8PSB5LUB5IDw9IEBoLzJcclxuXHJcbmV4cG9ydCBjbGFzcyBDRGVhZCBleHRlbmRzIENvbnRyb2xcclxuXHRjb25zdHJ1Y3RvciA6ICh4LHksdGV4dCxmZz0nd2hpdGUnKSAtPlxyXG5cdFx0c3VwZXIgeCx5LDAsMCx0ZXh0LCdibGFjaycsZmdcclxuXHRkcmF3IDogLT5cclxuXHRcdHB1c2goKVxyXG5cdFx0dGV4dFNpemUgMi41XHJcblx0XHRmaWxsICdibGFjaydcclxuXHRcdHRleHQgQHRleHQsQHgsQHlcclxuXHRcdHBvcCgpXHJcblxyXG5leHBvcnQgY2xhc3MgQ1JvdW5kZWQgZXh0ZW5kcyBDb250cm9sXHJcblx0Y29uc3RydWN0b3IgOiAoeCx5LHcsaCx0ZXh0PScnLCBAY2xpY2tlcj1udWxsKSAtPlxyXG5cdFx0c3VwZXIgeCx5LHcsaCx0ZXh0LCdibGFjaycsJ3doaXRlJ1xyXG5cdGRyYXcgOiAtPlxyXG5cdFx0aWYgQHZpc2libGVcclxuXHRcdFx0cHVzaCgpXHJcblx0XHRcdGZpbGwgaWYgQGRpc2FibGVkIHRoZW4gXCJncmF5XCIgZWxzZSAnYmxhY2snXHJcblx0XHRcdHJlY3QgQHgsQHksQHcsQGgsQGgvMlxyXG5cdFx0XHR0ZXh0U2l6ZSBAdGV4dFNpemVcclxuXHRcdFx0ZmlsbCBpZiBAZGlzYWJsZWQgdGhlbiBcImJsYWNrXCIgZWxzZSAnd2hpdGUnXHJcblx0XHRcdHRleHQgQHRleHQsQHgsQHlcclxuXHRcdFx0cG9wKClcclxuXHRjbGljayA6ID0+IGlmIEBjbGlja2VyIHRoZW4gQGNsaWNrZXIoKVxyXG4iXX0=
//# sourceURL=c:\github\2022-008-Berger\coffee\controls.coffee