// Generated by CoffeeScript 2.5.1
var Button, MenuButton, RectButton, calcr1r2;

export var dialogues = [];

export var showDialogue = function() {
  if (dialogues.length > 0) {
    return (_.last(dialogues)).show();
  }
};

calcr1r2 = function(n, w, h) {
  var r1, r2, s;
  s = Math.min(w, h);
  r2 = s / 7;
  r1 = s / 3;
  if (n > 6) {
    r2 *= 7 / n;
  }
  return [Math.round(r1), Math.round(r2)];
};

assert([200, 86], calcr1r2(4, 600, 800));

assert([200, 75], calcr1r2(8, 600, 800));

export var Dialogue = class Dialogue {
  constructor(x1 = width / 2, y1 = height / 2) {
    this.x = x1;
    this.y = y1;
    this.col = '#ff06';
    this.buttons = [];
    dialogues.push(this);
  }

  add(prompt, event) {
    return this.buttons.push(new Button(this, prompt, event));
  }

  clock(title = ' ', backPop = false, turn = 0) {
    var button, chars, i, j, len, n, r1, r2, ref, v;
    this.backPop = backPop;
    n = this.buttons.length;
    [r1, r2] = calcr1r2(n, width, height);
    ref = this.buttons;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      button = ref[i];
      v = i * 360 / n + turn - 90;
      button.x = r1 * cos(v);
      button.y = r1 * sin(v);
      button.r = r2;
    }
    button = new Button(this, title, function() {
      if (this.dlg.backPop) {
        return dialogues.pop();
      } else {
        return dialogues.clear();
      }
    });
    button.x = 0;
    button.y = 0;
    button.r = r2;
    this.buttons.push(button);
    chars = _.max((function() {
      var k, len1, ref1, results;
      ref1 = this.buttons;
      results = [];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        button = ref1[k];
        results.push(button.title.length);
      }
      return results;
    }).call(this));
    this.textSize = chars === 1 ? 0.75 * r2 : 2.5 * r2 / chars;
    return console.log(this.buttons);
  }

  update(delta) { // -1 eller +1
    var i, j, len, ref, ref1, results;
    if ((0 <= (ref = this.pageStart + delta * this.pageSize) && ref < this.lst.length)) {
      this.pageStart += delta * this.pageSize;
      ref1 = range(this.pageSize);
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        i = ref1[j];
        if (this.pageStart + i < this.lst.length) {
          results.push(this.buttons[i].arr = this.lst[this.pageStart + i]);
        } else {
          results.push(this.buttons[i].arr = []);
        }
      }
      return results;
    }
  }

  list(lst, pageSize = 10, backPop = true, click = function(arr) {
      return print(arr[0]);
    }) {
    var h, i, item, j, len, n, ref, w, x, y;
    this.lst = lst;
    this.pageSize = pageSize;
    this.backPop = backPop;
    this.pageStart = 0;
    n = this.pageSize;
    x = 0;
    w = width;
    h = height / (this.pageSize + 1);
    this.buttons.clear();
    ref = range(this.pageStart, this.pageStart + n);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (i < this.lst.length) {
        item = this.lst[i];
        y = i * h;
        ((item) => {
          return this.buttons.push(new RectButton(this, item, x, y, w, h, function() {
            return click(this.arr);
          }));
        })(item);
      }
    }
    this.buttons.push(new RectButton(this, ['Prev'], 0 * w / 3, h * n, w / 3, h, function() {
      return this.dlg.update(-1);
    }));
    this.buttons.push(new RectButton(this, ['Cancel'], 1 * w / 3, h * n, w / 3, h, function() {
      if (this.dlg.backPop) {
        return dialogues.pop();
      } else {
        return dialogues.clear();
      }
    }));
    return this.buttons.push(new RectButton(this, ['Next'], 2 * w / 3, h * n, w / 3, h, function() {
      return this.dlg.update(+1);
    }));
  }

  show() {
    var button, j, len, ref;
    push();
    translate(this.x, this.y);
    textSize(this.textSize);
    ref = this.buttons;
    for (j = 0, len = ref.length; j < len; j++) {
      button = ref[j];
      button.show(this);
    }
    return pop();
  }

  execute(mx, my) {
    var button, j, len, ref;
    ref = this.buttons;
    for (j = 0, len = ref.length; j < len; j++) {
      button = ref[j];
      if (button.inside(mx, my, this)) {
        button.execute();
        return true;
      }
    }
    return false;
  }

};

Button = class Button {
  constructor(dlg, title1, event1 = function() {
      return print(this.txt);
    }) {
    this.dlg = dlg;
    this.title = title1;
    this.event = event1;
    this.active = true;
  }

  info(title1, event1) {
    this.title = title1;
    this.event = event1;
    return this.active = true;
  }

  show() {
    var arr;
    //console.log 'show',@title,@x,@y
    if (this.active) {
      fill(this.dlg.col);
    } else {
      fill("#fff8");
    }
    stroke(0);
    ellipse(this.x, this.y, 2 * this.r, 2 * this.r);
    push();
    if (this.active) {
      fill(0);
    } else {
      fill("#888");
    }
    noStroke();
    textAlign(CENTER, CENTER);
    textSize(this.dlg.textSize);
    arr = this.title.split(' ');
    if (arr.length === 1) {
      text(arr[0], this.x, this.y);
    } else {
      text(arr[0], this.x, this.y - 0.3 * this.r);
      text(arr[1], this.x, this.y + 0.3 * this.r);
    }
    return pop();
  }

  inside(mx, my) {
    return this.r > dist(mx, my, this.dlg.x + this.x, this.dlg.y + this.y);
  }

  execute() {
    
    //dump.store "Button #{@title} #{@active}"
    if (this.active) {
      return this.event();
    }
  }

};

RectButton = class RectButton {
  constructor(dlg, arr1, x1, y1, w1, h1, event1 = function() {
      return print(this.item);
    }) {
    this.dlg = dlg;
    this.arr = arr1;
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.event = event1;
    this.active = true;
  }

  info(arr1, event1) {
    this.arr = arr1;
    this.event = event1;
    return this.active = true;
  }

  show() {
    var col;
    col = '#ff0';
    if (this.active) {
      fill(col);
    } else {
      fill("#fff8");
    }
    stroke(0);
    rect(this.x, this.y, this.w, this.h);
    push();
    if (this.active) {
      fill(0);
    } else {
      fill("#888");
    }
    noStroke();
    textSize(this.dlg.textSize);
    if (this.arr.length === 1) {
      textAlign(CENTER, CENTER);
      text(this.arr[0], this.x + this.w / 2, this.y + this.h / 2);
    }
    if (this.arr.length === 2) {
      textAlign(LEFT, CENTER);
      text(this.arr[0], this.x + 10, this.y + this.h / 2);
      textAlign(RIGHT, CENTER);
      text(this.arr[1], this.x + this.w - 10, this.y + this.h / 2);
    }
    if (this.arr.length === 3) {
      textAlign(LEFT, CENTER);
      text(this.arr[0], this.x + 10, this.y + this.h / 2);
      textAlign(CENTER, CENTER);
      text(this.arr[1], this.x + this.w / 2, this.y + this.h / 2);
      textAlign(RIGHT, CENTER);
      text(this.arr[2], this.x + this.w - 10, this.y + this.h / 2);
    } else {

    }
    return pop();
  }

  inside(mx, my) {
    return (this.x < mx && mx < this.x + this.w) && (this.y < my && my < this.y + this.h);
  }

  execute() {
    if (this.active) {
      return this.event();
    }
  }

};

MenuButton = class MenuButton {
  constructor() {
    this.d = (height + width) / 2 / 12 / 7;
    this.w = 7 * this.d;
    this.h = 7 * this.d;
    this.y = height - this.h - this.d;
    this.x = this.d;
  }

  draw() {
    fill("#fff8");
    sc(0);
    sw(1);
    rect(this.x, this.y, this.w, this.h);
    fill("#0008");
    rect(this.x + this.d, this.y + 1 * this.d, this.w - 2 * this.d, this.d);
    rect(this.x + this.d, this.y + 3 * this.d, this.w - 2 * this.d, this.d);
    return rect(this.x + this.d, this.y + 5 * this.d, this.w - 2 * this.d, this.d);
  }

  inside(mx, my) {
    return (this.x < mx && mx < this.x + this.w) && (this.y < my && my < this.y + this.h);
  }

  click() {
    if (dialogues.length === 0) {
      return menu1(); // else dialogues.clear()
    }
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-008-Berger\coffee\dialogue.coffee