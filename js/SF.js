// Generated by CoffeeScript 2.5.1
import {
  globals,
  invert
} from './globals.js';

import {
  State,
  grid
} from './states.js';

export var SF = class SF extends State { // Berger Spelare
  constructor(name) {
    super(name);
    this.halfTable = true;
  }

  setN() {
    this.N = globals.N;
    this.dx = 99 / this.N;
    if (this.dx > 10) {
      this.dx = 10;
    }
    this.dy = 99 / (this.N + 1);
    if (this.dy > 10) {
      this.dy = 10;
    }
    this.xoff = this.dx;
    return this.yoff = this.dy;
  }

  draw() {
    var i, iPlace, iPlayer, j, k, l, len, len1, len2, p, players, ref, ref1, ref2, rond, x, y;
    textSize(this.dy / 2);
    ref = range(this.N);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      text(i + 1, this.dx / 2, this.yoff + this.dy / 2 + this.dy * i);
    }
    ref1 = range(this.N - 1);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      rond = ref1[k];
      players = invert(globals.ronder[rond]);
      fill('black');
      text(rond + 1, this.dx * 1.5 + this.dx * rond, this.yoff - this.dy / 2);
      ref2 = range(this.N);
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        iPlace = ref2[l];
        iPlayer = players[iPlace];
        p = iPlayer;
        if (this.halfTable === false) {
          if (p >= this.N / 2) {
            p = this.N - 1 - p;
          }
        }
        fill(['white', 'black'][iPlayer % 2]);
        textAlign([RIGHT, LEFT][iPlayer % 2]);
        x = this.xoff + this.dx / 2 + this.dx * rond + [0.45 * this.dx, -0.45 * this.dx][iPlayer % 2];
        y = this.yoff + 0.3 * this.dy + this.dy * iPlace;
        text(p + 1, x, y);
      }
      textAlign(CENTER);
    }
    return grid(this.xoff, this.dx, this.N - 1, this.yoff, this.dy, this.N);
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU0YuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcU0YuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFBO0VBQVEsT0FBUjtFQUFnQixNQUFoQjtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFRLEtBQVI7RUFBZSxJQUFmO0NBQUEsTUFBQTs7QUFFQSxPQUFBLElBQWEsS0FBTixNQUFBLEdBQUEsUUFBaUIsTUFBakIsQ0FBQTtFQUVOLFdBQWMsQ0FBQyxJQUFELENBQUE7U0FDYixDQUFNLElBQU47SUFDQSxJQUFDLENBQUEsU0FBRCxHQUFhO0VBRkE7O0VBSWQsSUFBTyxDQUFBLENBQUE7SUFDTixJQUFDLENBQUEsQ0FBRCxHQUFLLE9BQU8sQ0FBQztJQUNiLElBQUMsQ0FBQSxFQUFELEdBQU0sRUFBQSxHQUFHLElBQUMsQ0FBQTtJQUNWLElBQUcsSUFBQyxDQUFBLEVBQUQsR0FBTSxFQUFUO01BQWlCLElBQUMsQ0FBQSxFQUFELEdBQUksR0FBckI7O0lBQ0EsSUFBQyxDQUFBLEVBQUQsR0FBTSxFQUFBLEdBQUcsQ0FBQyxJQUFDLENBQUEsQ0FBRCxHQUFHLENBQUo7SUFDVCxJQUFHLElBQUMsQ0FBQSxFQUFELEdBQU0sRUFBVDtNQUFpQixJQUFDLENBQUEsRUFBRCxHQUFJLEdBQXJCOztJQUNBLElBQUMsQ0FBQSxJQUFELEdBQVEsSUFBQyxDQUFBO1dBQ1QsSUFBQyxDQUFBLElBQUQsR0FBUSxJQUFDLENBQUE7RUFQSDs7RUFTUCxJQUFNLENBQUEsQ0FBQTtBQUNQLFFBQUEsQ0FBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBO0lBQUUsUUFBQSxDQUFTLElBQUMsQ0FBQSxFQUFELEdBQUksQ0FBYjtBQUNBO0lBQUEsS0FBQSxxQ0FBQTs7TUFDQyxJQUFBLENBQUssQ0FBQSxHQUFFLENBQVAsRUFBUyxJQUFDLENBQUEsRUFBRCxHQUFJLENBQWIsRUFBZSxJQUFDLENBQUEsSUFBRCxHQUFNLElBQUMsQ0FBQSxFQUFELEdBQUksQ0FBVixHQUFZLElBQUMsQ0FBQSxFQUFELEdBQUksQ0FBL0I7SUFERDtBQUVBO0lBQUEsS0FBQSx3Q0FBQTs7TUFDQyxPQUFBLEdBQVUsTUFBQSxDQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBRCxDQUFyQjtNQUNWLElBQUEsQ0FBSyxPQUFMO01BQ0EsSUFBQSxDQUFLLElBQUEsR0FBSyxDQUFWLEVBQVksSUFBQyxDQUFBLEVBQUQsR0FBSSxHQUFKLEdBQVEsSUFBQyxDQUFBLEVBQUQsR0FBSSxJQUF4QixFQUE2QixJQUFDLENBQUEsSUFBRCxHQUFNLElBQUMsQ0FBQSxFQUFELEdBQUksQ0FBdkM7QUFFQTtNQUFBLEtBQUEsd0NBQUE7O1FBQ0MsT0FBQSxHQUFVLE9BQU8sQ0FBQyxNQUFEO1FBQ2pCLENBQUEsR0FBSTtRQUNKLElBQUcsSUFBQyxDQUFBLFNBQUQsS0FBYyxLQUFqQjtVQUNDLElBQUcsQ0FBQSxJQUFLLElBQUMsQ0FBQSxDQUFELEdBQUcsQ0FBWDtZQUFrQixDQUFBLEdBQUksSUFBQyxDQUFBLENBQUQsR0FBRyxDQUFILEdBQUssRUFBM0I7V0FERDs7UUFFQSxJQUFBLENBQUssQ0FBQyxPQUFELEVBQVMsT0FBVCxDQUFpQixDQUFDLE9BQUEsR0FBVSxDQUFYLENBQXRCO1FBQ0EsU0FBQSxDQUFVLENBQUMsS0FBRCxFQUFPLElBQVAsQ0FBWSxDQUFDLE9BQUEsR0FBVSxDQUFYLENBQXRCO1FBQ0EsQ0FBQSxHQUFJLElBQUMsQ0FBQSxJQUFELEdBQVEsSUFBQyxDQUFBLEVBQUQsR0FBSSxDQUFaLEdBQWMsSUFBQyxDQUFBLEVBQUQsR0FBSSxJQUFsQixHQUF5QixDQUFDLElBQUEsR0FBSyxJQUFDLENBQUEsRUFBUCxFQUFVLENBQUMsSUFBRCxHQUFNLElBQUMsQ0FBQSxFQUFqQixDQUFvQixDQUFDLE9BQUEsR0FBVSxDQUFYO1FBQ2pELENBQUEsR0FBSSxJQUFDLENBQUEsSUFBRCxHQUFRLEdBQUEsR0FBSSxJQUFDLENBQUEsRUFBYixHQUFnQixJQUFDLENBQUEsRUFBRCxHQUFJO1FBQ3hCLElBQUEsQ0FBSyxDQUFBLEdBQUUsQ0FBUCxFQUFTLENBQVQsRUFBVyxDQUFYO01BVEQ7TUFVQSxTQUFBLENBQVUsTUFBVjtJQWZEO1dBZ0JBLElBQUEsQ0FBSyxJQUFDLENBQUEsSUFBTixFQUFXLElBQUMsQ0FBQSxFQUFaLEVBQWdCLElBQUMsQ0FBQSxDQUFELEdBQUcsQ0FBbkIsRUFBc0IsSUFBQyxDQUFBLElBQXZCLEVBQTZCLElBQUMsQ0FBQSxFQUE5QixFQUFrQyxJQUFDLENBQUEsQ0FBbkM7RUFwQks7O0FBZkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2dsb2JhbHMsaW52ZXJ0fSBmcm9tICcuL2dsb2JhbHMuanMnXHJcbmltcG9ydCB7U3RhdGUsIGdyaWR9IGZyb20gJy4vc3RhdGVzLmpzJ1xyXG5cclxuZXhwb3J0IGNsYXNzIFNGIGV4dGVuZHMgU3RhdGUgIyBCZXJnZXIgU3BlbGFyZVxyXG5cclxuXHRjb25zdHJ1Y3RvciA6IChuYW1lKSAtPlxyXG5cdFx0c3VwZXIgbmFtZVxyXG5cdFx0QGhhbGZUYWJsZSA9IHRydWVcclxuXHJcblx0c2V0TiA6IC0+XHJcblx0XHRATiA9IGdsb2JhbHMuTlxyXG5cdFx0QGR4ID0gOTkvQE5cclxuXHRcdGlmIEBkeCA+IDEwIHRoZW4gQGR4PTEwXHJcblx0XHRAZHkgPSA5OS8oQE4rMSlcclxuXHRcdGlmIEBkeSA+IDEwIHRoZW4gQGR5PTEwXHJcblx0XHRAeG9mZiA9IEBkeFxyXG5cdFx0QHlvZmYgPSBAZHlcclxuXHJcblx0ZHJhdzogLT5cclxuXHRcdHRleHRTaXplIEBkeS8yXHJcblx0XHRmb3IgaSBpbiByYW5nZSBATlxyXG5cdFx0XHR0ZXh0IGkrMSxAZHgvMixAeW9mZitAZHkvMitAZHkqaVxyXG5cdFx0Zm9yIHJvbmQgaW4gcmFuZ2UgQE4tMVxyXG5cdFx0XHRwbGF5ZXJzID0gaW52ZXJ0IGdsb2JhbHMucm9uZGVyW3JvbmRdXHJcblx0XHRcdGZpbGwgJ2JsYWNrJ1xyXG5cdFx0XHR0ZXh0IHJvbmQrMSxAZHgqMS41K0BkeCpyb25kLEB5b2ZmLUBkeS8yXHJcblxyXG5cdFx0XHRmb3IgaVBsYWNlIGluIHJhbmdlIEBOXHJcblx0XHRcdFx0aVBsYXllciA9IHBsYXllcnNbaVBsYWNlXVxyXG5cdFx0XHRcdHAgPSBpUGxheWVyXHJcblx0XHRcdFx0aWYgQGhhbGZUYWJsZSA9PSBmYWxzZVxyXG5cdFx0XHRcdFx0aWYgcCA+PSBATi8yIHRoZW4gcCA9IEBOLTEtcFxyXG5cdFx0XHRcdGZpbGwgWyd3aGl0ZScsJ2JsYWNrJ11baVBsYXllciAlIDJdXHJcblx0XHRcdFx0dGV4dEFsaWduIFtSSUdIVCxMRUZUXVtpUGxheWVyICUgMl1cclxuXHRcdFx0XHR4ID0gQHhvZmYgKyBAZHgvMitAZHgqcm9uZCArIFswLjQ1KkBkeCwtMC40NSpAZHhdW2lQbGF5ZXIgJSAyXVxyXG5cdFx0XHRcdHkgPSBAeW9mZiArIDAuMypAZHkrQGR5KmlQbGFjZVxyXG5cdFx0XHRcdHRleHQgcCsxLHgseVxyXG5cdFx0XHR0ZXh0QWxpZ24gQ0VOVEVSXHJcblx0XHRncmlkIEB4b2ZmLEBkeCwgQE4tMSwgQHlvZmYsIEBkeSwgQE5cclxuIl19
//# sourceURL=c:\github\2022-008-Berger\coffee\SF.coffee