// Generated by CoffeeScript 2.5.1
import {
  globals,
  invert
} from './globals.js';

import {
  State,
  grid
} from './states.js';

export var SF = class SF extends State { // Berger Spelare
  constructor(name) {
    super(name);
    this.halfTable = true;
  }

  setN() {
    this.N = globals.N;
    this.dx = 99 / this.N;
    if (this.dx > 10) {
      this.dx = 10;
    }
    this.dy = 99 / (this.N + 1);
    if (this.dy > 10) {
      this.dy = 10;
    }
    this.xoff = this.dx;
    return this.yoff = this.dy;
  }

  draw() {
    var i, iPlace, iPlayer, j, k, l, len, len1, len2, p, players, ref, ref1, ref2, rond, x, y;
    //super()
    textSize(this.dy / 2);
    textAlign(CENTER);
    text(`${this.N}`, this.dx / 2, this.yoff - this.dy / 2);
    ref = range(this.N);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      text(i + 1, this.dx / 2, this.yoff + this.dy / 2 + this.dy * i);
    }
    ref1 = range(this.N - 1);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      rond = ref1[k];
      players = invert(globals.ronder[rond]);
      fill('black');
      text(rond + 1, this.dx * 1.5 + this.dx * rond, this.yoff - this.dy / 2);
      ref2 = range(this.N);
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        iPlace = ref2[l];
        iPlayer = players[iPlace];
        p = iPlayer;
        if (this.halfTable === false) {
          if (p >= this.N / 2) {
            p = this.N - 1 - p;
          }
        }
        fill(['white', 'black'][iPlayer % 2]);
        textAlign([RIGHT, LEFT][iPlayer % 2]);
        x = this.xoff + this.dx / 2 + this.dx * rond + [0.45 * this.dx, -0.45 * this.dx][iPlayer % 2];
        y = this.yoff + 0.3 * this.dy + this.dy * iPlace;
        text(p + 1, x, y);
      }
      textAlign(CENTER);
    }
    return grid(this.xoff, this.dx, this.N - 1, this.yoff, this.dy, this.N);
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU0YuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcU0YuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFBO0VBQVEsT0FBUjtFQUFnQixNQUFoQjtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFRLEtBQVI7RUFBZSxJQUFmO0NBQUEsTUFBQTs7QUFFQSxPQUFBLElBQWEsS0FBTixNQUFBLEdBQUEsUUFBaUIsTUFBakIsQ0FBQTtFQUVOLFdBQWMsQ0FBQyxJQUFELENBQUE7U0FDYixDQUFNLElBQU47SUFDQSxJQUFDLENBQUEsU0FBRCxHQUFhO0VBRkE7O0VBSWQsSUFBTyxDQUFBLENBQUE7SUFDTixJQUFDLENBQUEsQ0FBRCxHQUFLLE9BQU8sQ0FBQztJQUNiLElBQUMsQ0FBQSxFQUFELEdBQU0sRUFBQSxHQUFHLElBQUMsQ0FBQTtJQUNWLElBQUcsSUFBQyxDQUFBLEVBQUQsR0FBTSxFQUFUO01BQWlCLElBQUMsQ0FBQSxFQUFELEdBQUksR0FBckI7O0lBQ0EsSUFBQyxDQUFBLEVBQUQsR0FBTSxFQUFBLEdBQUcsQ0FBQyxJQUFDLENBQUEsQ0FBRCxHQUFHLENBQUo7SUFDVCxJQUFHLElBQUMsQ0FBQSxFQUFELEdBQU0sRUFBVDtNQUFpQixJQUFDLENBQUEsRUFBRCxHQUFJLEdBQXJCOztJQUNBLElBQUMsQ0FBQSxJQUFELEdBQVEsSUFBQyxDQUFBO1dBQ1QsSUFBQyxDQUFBLElBQUQsR0FBUSxJQUFDLENBQUE7RUFQSDs7RUFTUCxJQUFNLENBQUEsQ0FBQTtBQUNQLFFBQUEsQ0FBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUE7O0lBRUUsUUFBQSxDQUFTLElBQUMsQ0FBQSxFQUFELEdBQUksQ0FBYjtJQUNBLFNBQUEsQ0FBVSxNQUFWO0lBQ0EsSUFBQSxDQUFLLENBQUEsQ0FBQSxDQUFHLElBQUMsQ0FBQSxDQUFKLENBQUEsQ0FBTCxFQUFhLElBQUMsQ0FBQSxFQUFELEdBQUksQ0FBakIsRUFBbUIsSUFBQyxDQUFBLElBQUQsR0FBTSxJQUFDLENBQUEsRUFBRCxHQUFJLENBQTdCO0FBQ0E7SUFBQSxLQUFBLHFDQUFBOztNQUNDLElBQUEsQ0FBSyxDQUFBLEdBQUUsQ0FBUCxFQUFTLElBQUMsQ0FBQSxFQUFELEdBQUksQ0FBYixFQUFlLElBQUMsQ0FBQSxJQUFELEdBQU0sSUFBQyxDQUFBLEVBQUQsR0FBSSxDQUFWLEdBQVksSUFBQyxDQUFBLEVBQUQsR0FBSSxDQUEvQjtJQUREO0FBRUE7SUFBQSxLQUFBLHdDQUFBOztNQUNDLE9BQUEsR0FBVSxNQUFBLENBQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFELENBQXJCO01BQ1YsSUFBQSxDQUFLLE9BQUw7TUFDQSxJQUFBLENBQUssSUFBQSxHQUFLLENBQVYsRUFBWSxJQUFDLENBQUEsRUFBRCxHQUFJLEdBQUosR0FBUSxJQUFDLENBQUEsRUFBRCxHQUFJLElBQXhCLEVBQTZCLElBQUMsQ0FBQSxJQUFELEdBQU0sSUFBQyxDQUFBLEVBQUQsR0FBSSxDQUF2QztBQUVBO01BQUEsS0FBQSx3Q0FBQTs7UUFDQyxPQUFBLEdBQVUsT0FBTyxDQUFDLE1BQUQ7UUFDakIsQ0FBQSxHQUFJO1FBQ0osSUFBRyxJQUFDLENBQUEsU0FBRCxLQUFjLEtBQWpCO1VBQ0MsSUFBRyxDQUFBLElBQUssSUFBQyxDQUFBLENBQUQsR0FBRyxDQUFYO1lBQWtCLENBQUEsR0FBSSxJQUFDLENBQUEsQ0FBRCxHQUFHLENBQUgsR0FBSyxFQUEzQjtXQUREOztRQUVBLElBQUEsQ0FBSyxDQUFDLE9BQUQsRUFBUyxPQUFULENBQWlCLENBQUMsT0FBQSxHQUFVLENBQVgsQ0FBdEI7UUFDQSxTQUFBLENBQVUsQ0FBQyxLQUFELEVBQU8sSUFBUCxDQUFZLENBQUMsT0FBQSxHQUFVLENBQVgsQ0FBdEI7UUFDQSxDQUFBLEdBQUksSUFBQyxDQUFBLElBQUQsR0FBUSxJQUFDLENBQUEsRUFBRCxHQUFJLENBQVosR0FBYyxJQUFDLENBQUEsRUFBRCxHQUFJLElBQWxCLEdBQXlCLENBQUMsSUFBQSxHQUFLLElBQUMsQ0FBQSxFQUFQLEVBQVUsQ0FBQyxJQUFELEdBQU0sSUFBQyxDQUFBLEVBQWpCLENBQW9CLENBQUMsT0FBQSxHQUFVLENBQVg7UUFDakQsQ0FBQSxHQUFJLElBQUMsQ0FBQSxJQUFELEdBQVEsR0FBQSxHQUFJLElBQUMsQ0FBQSxFQUFiLEdBQWdCLElBQUMsQ0FBQSxFQUFELEdBQUk7UUFDeEIsSUFBQSxDQUFLLENBQUEsR0FBRSxDQUFQLEVBQVMsQ0FBVCxFQUFXLENBQVg7TUFURDtNQVVBLFNBQUEsQ0FBVSxNQUFWO0lBZkQ7V0FnQkEsSUFBQSxDQUFLLElBQUMsQ0FBQSxJQUFOLEVBQVcsSUFBQyxDQUFBLEVBQVosRUFBZ0IsSUFBQyxDQUFBLENBQUQsR0FBRyxDQUFuQixFQUFzQixJQUFDLENBQUEsSUFBdkIsRUFBNkIsSUFBQyxDQUFBLEVBQTlCLEVBQWtDLElBQUMsQ0FBQSxDQUFuQztFQXhCSzs7QUFmQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Z2xvYmFscyxpbnZlcnR9IGZyb20gJy4vZ2xvYmFscy5qcydcclxuaW1wb3J0IHtTdGF0ZSwgZ3JpZH0gZnJvbSAnLi9zdGF0ZXMuanMnXHJcblxyXG5leHBvcnQgY2xhc3MgU0YgZXh0ZW5kcyBTdGF0ZSAjIEJlcmdlciBTcGVsYXJlXHJcblxyXG5cdGNvbnN0cnVjdG9yIDogKG5hbWUpIC0+XHJcblx0XHRzdXBlciBuYW1lXHJcblx0XHRAaGFsZlRhYmxlID0gdHJ1ZVxyXG5cclxuXHRzZXROIDogLT5cclxuXHRcdEBOID0gZ2xvYmFscy5OXHJcblx0XHRAZHggPSA5OS9ATlxyXG5cdFx0aWYgQGR4ID4gMTAgdGhlbiBAZHg9MTBcclxuXHRcdEBkeSA9IDk5LyhATisxKVxyXG5cdFx0aWYgQGR5ID4gMTAgdGhlbiBAZHk9MTBcclxuXHRcdEB4b2ZmID0gQGR4XHJcblx0XHRAeW9mZiA9IEBkeVxyXG5cclxuXHRkcmF3OiAtPlxyXG5cdFx0I3N1cGVyKClcclxuXHJcblx0XHR0ZXh0U2l6ZSBAZHkvMlxyXG5cdFx0dGV4dEFsaWduIENFTlRFUlxyXG5cdFx0dGV4dCBcIiN7QE59XCIsQGR4LzIsQHlvZmYtQGR5LzJcclxuXHRcdGZvciBpIGluIHJhbmdlIEBOXHJcblx0XHRcdHRleHQgaSsxLEBkeC8yLEB5b2ZmK0BkeS8yK0BkeSppXHJcblx0XHRmb3Igcm9uZCBpbiByYW5nZSBATi0xXHJcblx0XHRcdHBsYXllcnMgPSBpbnZlcnQgZ2xvYmFscy5yb25kZXJbcm9uZF1cclxuXHRcdFx0ZmlsbCAnYmxhY2snXHJcblx0XHRcdHRleHQgcm9uZCsxLEBkeCoxLjUrQGR4KnJvbmQsQHlvZmYtQGR5LzJcclxuXHJcblx0XHRcdGZvciBpUGxhY2UgaW4gcmFuZ2UgQE5cclxuXHRcdFx0XHRpUGxheWVyID0gcGxheWVyc1tpUGxhY2VdXHJcblx0XHRcdFx0cCA9IGlQbGF5ZXJcclxuXHRcdFx0XHRpZiBAaGFsZlRhYmxlID09IGZhbHNlXHJcblx0XHRcdFx0XHRpZiBwID49IEBOLzIgdGhlbiBwID0gQE4tMS1wXHJcblx0XHRcdFx0ZmlsbCBbJ3doaXRlJywnYmxhY2snXVtpUGxheWVyICUgMl1cclxuXHRcdFx0XHR0ZXh0QWxpZ24gW1JJR0hULExFRlRdW2lQbGF5ZXIgJSAyXVxyXG5cdFx0XHRcdHggPSBAeG9mZiArIEBkeC8yK0BkeCpyb25kICsgWzAuNDUqQGR4LC0wLjQ1KkBkeF1baVBsYXllciAlIDJdXHJcblx0XHRcdFx0eSA9IEB5b2ZmICsgMC4zKkBkeStAZHkqaVBsYWNlXHJcblx0XHRcdFx0dGV4dCBwKzEseCx5XHJcblx0XHRcdHRleHRBbGlnbiBDRU5URVJcclxuXHRcdGdyaWQgQHhvZmYsQGR4LCBATi0xLCBAeW9mZiwgQGR5LCBATlxyXG5cclxuIl19
//# sourceURL=c:\github\2022-008-Berger\coffee\SF.coffee