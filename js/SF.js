// Generated by CoffeeScript 2.5.1
import {
  globals,
  invert
} from './globals.js';

import {
  ALPHABET,
  State,
  grid,
  markeraRond
} from './states.js';

export var SF = class SF extends State { // Berger Spelare
  constructor(name) {
    super(name);
    this.halfTable = true;
  }

  setN() {
    this.N = globals.N;
    this.dx = 99 / this.N;
    if (this.dx > 10) {
      this.dx = 10;
    }
    this.dy = (100 - 12) / (this.N + 1);
    if (this.dy > 10) {
      this.dy = 10;
    }
    this.xoff = this.dx;
    return this.yoff = 6 + this.dy;
  }

  draw() {
    var i, iPlace, iPlayer, j, k, l, len, len1, len2, p, players, ref, ref1, ref2, rond, x, y;
    //super()
    textSize(this.dy / 2);
    ref = range(this.N);
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      fill(i === 0 ? 'red' : 'black');
      text(ALPHABET[i], this.dx / 2, this.yoff + this.dy / 2 + this.dy * i);
    }
    ref1 = range(this.N - 1);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      rond = ref1[k];
      players = invert(globals.ronder[rond]);
      fill('black');
      text(rond + 1, this.dx * 1.5 + this.dx * rond, this.yoff - this.dy / 2);
      if (rond === globals.rond) {
        markeraRond(rond, this.xoff, this.dx, this.yoff, this.dy, this.N);
      }
      ref2 = range(this.N);
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        iPlace = ref2[l];
        iPlayer = players[iPlace];
        p = iPlayer;
        if (this.halfTable === false) {
          if (p >= this.N / 2) {
            p = this.N - 1 - p;
          }
        }
        fill(['white', 'black'][iPlayer % 2]);
        textAlign([RIGHT, LEFT][iPlayer % 2]);
        x = this.xoff + this.dx / 2 + this.dx * rond + [0.45 * this.dx, -0.45 * this.dx][iPlayer % 2];
        y = this.yoff + 0.3 * this.dy + this.dy * iPlace;
        text(p + 1, x, y);
      }
      textAlign(CENTER);
    }
    return grid(this.xoff, this.dx, this.N - 1, this.yoff, this.dy, this.N);
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU0YuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcU0YuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFBO0VBQVEsT0FBUjtFQUFnQixNQUFoQjtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFRLFFBQVI7RUFBa0IsS0FBbEI7RUFBeUIsSUFBekI7RUFBK0IsV0FBL0I7Q0FBQSxNQUFBOztBQUVBLE9BQUEsSUFBYSxLQUFOLE1BQUEsR0FBQSxRQUFpQixNQUFqQixDQUFBO0VBRU4sV0FBYyxDQUFDLElBQUQsQ0FBQTtTQUNiLENBQU0sSUFBTjtJQUNBLElBQUMsQ0FBQSxTQUFELEdBQWE7RUFGQTs7RUFJZCxJQUFPLENBQUEsQ0FBQTtJQUNOLElBQUMsQ0FBQSxDQUFELEdBQUssT0FBTyxDQUFDO0lBQ2IsSUFBQyxDQUFBLEVBQUQsR0FBTSxFQUFBLEdBQUcsSUFBQyxDQUFBO0lBQ1YsSUFBRyxJQUFDLENBQUEsRUFBRCxHQUFNLEVBQVQ7TUFBaUIsSUFBQyxDQUFBLEVBQUQsR0FBSSxHQUFyQjs7SUFDQSxJQUFDLENBQUEsRUFBRCxHQUFNLENBQUMsR0FBQSxHQUFJLEVBQUwsQ0FBQSxHQUFTLENBQUMsSUFBQyxDQUFBLENBQUQsR0FBRyxDQUFKO0lBQ2YsSUFBRyxJQUFDLENBQUEsRUFBRCxHQUFNLEVBQVQ7TUFBaUIsSUFBQyxDQUFBLEVBQUQsR0FBSSxHQUFyQjs7SUFDQSxJQUFDLENBQUEsSUFBRCxHQUFRLElBQUMsQ0FBQTtXQUNULElBQUMsQ0FBQSxJQUFELEdBQVEsQ0FBQSxHQUFFLElBQUMsQ0FBQTtFQVBMOztFQVNQLElBQU0sQ0FBQSxDQUFBO0FBQ1AsUUFBQSxDQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQTs7SUFFRSxRQUFBLENBQVMsSUFBQyxDQUFBLEVBQUQsR0FBSSxDQUFiO0FBQ0E7SUFBQSxLQUFBLHFDQUFBOztNQUNDLElBQUEsQ0FBUSxDQUFBLEtBQUcsQ0FBTixHQUFhLEtBQWIsR0FBd0IsT0FBN0I7TUFDQSxJQUFBLENBQUssUUFBUSxDQUFDLENBQUQsQ0FBYixFQUFpQixJQUFDLENBQUEsRUFBRCxHQUFJLENBQXJCLEVBQXVCLElBQUMsQ0FBQSxJQUFELEdBQU0sSUFBQyxDQUFBLEVBQUQsR0FBSSxDQUFWLEdBQVksSUFBQyxDQUFBLEVBQUQsR0FBSSxDQUF2QztJQUZEO0FBR0E7SUFBQSxLQUFBLHdDQUFBOztNQUNDLE9BQUEsR0FBVSxNQUFBLENBQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFELENBQXJCO01BQ1YsSUFBQSxDQUFLLE9BQUw7TUFDQSxJQUFBLENBQUssSUFBQSxHQUFLLENBQVYsRUFBWSxJQUFDLENBQUEsRUFBRCxHQUFJLEdBQUosR0FBUSxJQUFDLENBQUEsRUFBRCxHQUFJLElBQXhCLEVBQTZCLElBQUMsQ0FBQSxJQUFELEdBQU0sSUFBQyxDQUFBLEVBQUQsR0FBSSxDQUF2QztNQUVBLElBQUcsSUFBQSxLQUFRLE9BQU8sQ0FBQyxJQUFuQjtRQUE2QixXQUFBLENBQVksSUFBWixFQUFpQixJQUFDLENBQUEsSUFBbEIsRUFBdUIsSUFBQyxDQUFBLEVBQXhCLEVBQTJCLElBQUMsQ0FBQSxJQUE1QixFQUFpQyxJQUFDLENBQUEsRUFBbEMsRUFBcUMsSUFBQyxDQUFBLENBQXRDLEVBQTdCOztBQUNBO01BQUEsS0FBQSx3Q0FBQTs7UUFDQyxPQUFBLEdBQVUsT0FBTyxDQUFDLE1BQUQ7UUFDakIsQ0FBQSxHQUFJO1FBQ0osSUFBRyxJQUFDLENBQUEsU0FBRCxLQUFjLEtBQWpCO1VBQ0MsSUFBRyxDQUFBLElBQUssSUFBQyxDQUFBLENBQUQsR0FBRyxDQUFYO1lBQWtCLENBQUEsR0FBSSxJQUFDLENBQUEsQ0FBRCxHQUFHLENBQUgsR0FBSyxFQUEzQjtXQUREOztRQUVBLElBQUEsQ0FBSyxDQUFDLE9BQUQsRUFBUyxPQUFULENBQWlCLENBQUMsT0FBQSxHQUFVLENBQVgsQ0FBdEI7UUFDQSxTQUFBLENBQVUsQ0FBQyxLQUFELEVBQU8sSUFBUCxDQUFZLENBQUMsT0FBQSxHQUFVLENBQVgsQ0FBdEI7UUFDQSxDQUFBLEdBQUksSUFBQyxDQUFBLElBQUQsR0FBUSxJQUFDLENBQUEsRUFBRCxHQUFJLENBQVosR0FBYyxJQUFDLENBQUEsRUFBRCxHQUFJLElBQWxCLEdBQXlCLENBQUMsSUFBQSxHQUFLLElBQUMsQ0FBQSxFQUFQLEVBQVUsQ0FBQyxJQUFELEdBQU0sSUFBQyxDQUFBLEVBQWpCLENBQW9CLENBQUMsT0FBQSxHQUFVLENBQVg7UUFDakQsQ0FBQSxHQUFJLElBQUMsQ0FBQSxJQUFELEdBQVEsR0FBQSxHQUFJLElBQUMsQ0FBQSxFQUFiLEdBQWdCLElBQUMsQ0FBQSxFQUFELEdBQUk7UUFDeEIsSUFBQSxDQUFLLENBQUEsR0FBRSxDQUFQLEVBQVMsQ0FBVCxFQUFXLENBQVg7TUFURDtNQVVBLFNBQUEsQ0FBVSxNQUFWO0lBaEJEO1dBaUJBLElBQUEsQ0FBSyxJQUFDLENBQUEsSUFBTixFQUFXLElBQUMsQ0FBQSxFQUFaLEVBQWdCLElBQUMsQ0FBQSxDQUFELEdBQUcsQ0FBbkIsRUFBc0IsSUFBQyxDQUFBLElBQXZCLEVBQTZCLElBQUMsQ0FBQSxFQUE5QixFQUFrQyxJQUFDLENBQUEsQ0FBbkM7RUF4Qks7O0FBZkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2dsb2JhbHMsaW52ZXJ0fSBmcm9tICcuL2dsb2JhbHMuanMnXHJcbmltcG9ydCB7QUxQSEFCRVQsIFN0YXRlLCBncmlkLCBtYXJrZXJhUm9uZH0gZnJvbSAnLi9zdGF0ZXMuanMnXHJcblxyXG5leHBvcnQgY2xhc3MgU0YgZXh0ZW5kcyBTdGF0ZSAjIEJlcmdlciBTcGVsYXJlXHJcblxyXG5cdGNvbnN0cnVjdG9yIDogKG5hbWUpIC0+XHJcblx0XHRzdXBlciBuYW1lXHJcblx0XHRAaGFsZlRhYmxlID0gdHJ1ZVxyXG5cclxuXHRzZXROIDogLT5cclxuXHRcdEBOID0gZ2xvYmFscy5OXHJcblx0XHRAZHggPSA5OS9ATlxyXG5cdFx0aWYgQGR4ID4gMTAgdGhlbiBAZHg9MTBcclxuXHRcdEBkeSA9ICgxMDAtMTIpLyhATisxKVxyXG5cdFx0aWYgQGR5ID4gMTAgdGhlbiBAZHk9MTBcclxuXHRcdEB4b2ZmID0gQGR4XHJcblx0XHRAeW9mZiA9IDYrQGR5XHJcblxyXG5cdGRyYXc6IC0+XHJcblx0XHQjc3VwZXIoKVxyXG5cclxuXHRcdHRleHRTaXplIEBkeS8yXHJcblx0XHRmb3IgaSBpbiByYW5nZSBATlxyXG5cdFx0XHRmaWxsIGlmIGk9PTAgdGhlbiAncmVkJyBlbHNlICdibGFjaydcclxuXHRcdFx0dGV4dCBBTFBIQUJFVFtpXSxAZHgvMixAeW9mZitAZHkvMitAZHkqaVxyXG5cdFx0Zm9yIHJvbmQgaW4gcmFuZ2UgQE4tMVxyXG5cdFx0XHRwbGF5ZXJzID0gaW52ZXJ0IGdsb2JhbHMucm9uZGVyW3JvbmRdXHJcblx0XHRcdGZpbGwgJ2JsYWNrJ1xyXG5cdFx0XHR0ZXh0IHJvbmQrMSxAZHgqMS41K0BkeCpyb25kLEB5b2ZmLUBkeS8yXHJcblxyXG5cdFx0XHRpZiByb25kID09IGdsb2JhbHMucm9uZCB0aGVuIG1hcmtlcmFSb25kIHJvbmQsQHhvZmYsQGR4LEB5b2ZmLEBkeSxATlxyXG5cdFx0XHRmb3IgaVBsYWNlIGluIHJhbmdlIEBOXHJcblx0XHRcdFx0aVBsYXllciA9IHBsYXllcnNbaVBsYWNlXVxyXG5cdFx0XHRcdHAgPSBpUGxheWVyXHJcblx0XHRcdFx0aWYgQGhhbGZUYWJsZSA9PSBmYWxzZVxyXG5cdFx0XHRcdFx0aWYgcCA+PSBATi8yIHRoZW4gcCA9IEBOLTEtcFxyXG5cdFx0XHRcdGZpbGwgWyd3aGl0ZScsJ2JsYWNrJ11baVBsYXllciAlIDJdXHJcblx0XHRcdFx0dGV4dEFsaWduIFtSSUdIVCxMRUZUXVtpUGxheWVyICUgMl1cclxuXHRcdFx0XHR4ID0gQHhvZmYgKyBAZHgvMitAZHgqcm9uZCArIFswLjQ1KkBkeCwtMC40NSpAZHhdW2lQbGF5ZXIgJSAyXVxyXG5cdFx0XHRcdHkgPSBAeW9mZiArIDAuMypAZHkrQGR5KmlQbGFjZVxyXG5cdFx0XHRcdHRleHQgcCsxLHgseVxyXG5cdFx0XHR0ZXh0QWxpZ24gQ0VOVEVSXHJcblx0XHRncmlkIEB4b2ZmLEBkeCwgQE4tMSwgQHlvZmYsIEBkeSwgQE5cclxuXHJcbiJdfQ==
//# sourceURL=c:\github\2022-008-Berger\coffee\SF.coffee